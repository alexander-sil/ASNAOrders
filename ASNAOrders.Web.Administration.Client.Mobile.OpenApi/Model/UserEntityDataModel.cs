/* 
 * ASNAOrders.Web.Administration.Server
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = ASNAOrders.Web.Administration.Client.OpenApi.Client.SwaggerDateConverter;
namespace ASNAOrders.Web.Administration.Client.OpenApi.Model
{
    /// <summary>
    /// UserEntityDataModel
    /// </summary>
    [DataContract]
    public partial class UserEntityDataModel : IEquatable<UserEntityDataModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UserEntityDataModel" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="username">username.</param>
        /// <param name="passwordHash">passwordHash.</param>
        /// <param name="encryptedPasswordSalt">encryptedPasswordSalt.</param>
        /// <param name="banIssued">banIssued.</param>
        /// <param name="banReason">banReason.</param>
        /// <param name="permissions">permissions.</param>
        public UserEntityDataModel(int? id = default, string username = default, string passwordHash = default, string encryptedPasswordSalt = default, bool? banIssued = default, string banReason = default, UserPermissionsDataModel permissions = default)
        {
            Id = id;
            Username = username;
            PasswordHash = passwordHash;
            EncryptedPasswordSalt = encryptedPasswordSalt;
            BanIssued = banIssued;
            BanReason = banReason;
            Permissions = permissions;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public int? Id { get; set; }

        /// <summary>
        /// Gets or Sets Username
        /// </summary>
        [DataMember(Name = "username", EmitDefaultValue = false)]
        public string Username { get; set; }

        /// <summary>
        /// Gets or Sets PasswordHash
        /// </summary>
        [DataMember(Name = "passwordHash", EmitDefaultValue = false)]
        public string PasswordHash { get; set; }

        /// <summary>
        /// Gets or Sets EncryptedPasswordSalt
        /// </summary>
        [DataMember(Name = "encryptedPasswordSalt", EmitDefaultValue = false)]
        public string EncryptedPasswordSalt { get; set; }

        /// <summary>
        /// Gets or Sets BanIssued
        /// </summary>
        [DataMember(Name = "banIssued", EmitDefaultValue = false)]
        public bool? BanIssued { get; set; }

        /// <summary>
        /// Gets or Sets BanReason
        /// </summary>
        [DataMember(Name = "banReason", EmitDefaultValue = false)]
        public string BanReason { get; set; }

        /// <summary>
        /// Gets or Sets Permissions
        /// </summary>
        [DataMember(Name = "permissions", EmitDefaultValue = false)]
        public UserPermissionsDataModel Permissions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UserEntityDataModel {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Username: ").Append(Username).Append("\n");
            sb.Append("  PasswordHash: ").Append(PasswordHash).Append("\n");
            sb.Append("  EncryptedPasswordSalt: ").Append(EncryptedPasswordSalt).Append("\n");
            sb.Append("  BanIssued: ").Append(BanIssued).Append("\n");
            sb.Append("  BanReason: ").Append(BanReason).Append("\n");
            sb.Append("  Permissions: ").Append(Permissions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as UserEntityDataModel);
        }

        /// <summary>
        /// Returns true if UserEntityDataModel instances are equal
        /// </summary>
        /// <param name="input">Instance of UserEntityDataModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UserEntityDataModel input)
        {
            if (input == null)
                return false;

            return
                (
                    Id == input.Id ||
                    Id != null &&
                    Id.Equals(input.Id)
                ) &&
                (
                    Username == input.Username ||
                    Username != null &&
                    Username.Equals(input.Username)
                ) &&
                (
                    PasswordHash == input.PasswordHash ||
                    PasswordHash != null &&
                    PasswordHash.Equals(input.PasswordHash)
                ) &&
                (
                    EncryptedPasswordSalt == input.EncryptedPasswordSalt ||
                    EncryptedPasswordSalt != null &&
                    EncryptedPasswordSalt.Equals(input.EncryptedPasswordSalt)
                ) &&
                (
                    BanIssued == input.BanIssued ||
                    BanIssued != null &&
                    BanIssued.Equals(input.BanIssued)
                ) &&
                (
                    BanReason == input.BanReason ||
                    BanReason != null &&
                    BanReason.Equals(input.BanReason)
                ) &&
                (
                    Permissions == input.Permissions ||
                    Permissions != null &&
                    Permissions.Equals(input.Permissions)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                if (Username != null)
                    hashCode = hashCode * 59 + Username.GetHashCode();
                if (PasswordHash != null)
                    hashCode = hashCode * 59 + PasswordHash.GetHashCode();
                if (EncryptedPasswordSalt != null)
                    hashCode = hashCode * 59 + EncryptedPasswordSalt.GetHashCode();
                if (BanIssued != null)
                    hashCode = hashCode * 59 + BanIssued.GetHashCode();
                if (BanReason != null)
                    hashCode = hashCode * 59 + BanReason.GetHashCode();
                if (Permissions != null)
                    hashCode = hashCode * 59 + Permissions.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
