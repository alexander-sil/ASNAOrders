/* 
 * ASNAOrders.Web.Administration.Server
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = ASNAOrders.Web.Administration.Client.OpenApi.Client.SwaggerDateConverter;
namespace ASNAOrders.Web.Administration.Client.OpenApi.Model
{
    /// <summary>
    /// IssuibleConfig
    /// </summary>
    [DataContract]
    public partial class IssuibleConfig : IEquatable<IssuibleConfig>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IssuibleConfig" /> class.
        /// </summary>
        /// <param name="mqVhost">mqVhost.</param>
        /// <param name="mqHostname">mqHostname.</param>
        /// <param name="mqPort">mqPort.</param>
        /// <param name="issuerSigningKeySetToAuto">issuerSigningKeySetToAuto.</param>
        /// <param name="issuerSigningKey">issuerSigningKey.</param>
        /// <param name="signingKeyFileSetToAuto">signingKeyFileSetToAuto.</param>
        /// <param name="clientIdSetToAuto">clientIdSetToAuto.</param>
        /// <param name="clientId">clientId.</param>
        /// <param name="signingKeyFile">signingKeyFile.</param>
        /// <param name="clientSecretSetToAuto">clientSecretSetToAuto.</param>
        /// <param name="clientSecret">clientSecret.</param>
        /// <param name="clientSecretFilenameSetToAuto">clientSecretFilenameSetToAuto.</param>
        /// <param name="clientSecretFilename">clientSecretFilename.</param>
        /// <param name="databaseType">databaseType.</param>
        /// <param name="xmlStockPath">xmlStockPath.</param>
        /// <param name="sqliteDbCacheFilename">sqliteDbCacheFilename.</param>
        /// <param name="mssqlServerHost">mssqlServerHost.</param>
        /// <param name="mssqlServerPort">mssqlServerPort.</param>
        /// <param name="mssqlServerUsername">mssqlServerUsername.</param>
        /// <param name="mssqlServerPassword">mssqlServerPassword.</param>
        /// <param name="connectionString">connectionString.</param>
        /// <param name="initialCatalog">initialCatalog.</param>
        /// <param name="sink">sink.</param>
        /// <param name="errorLogPrefix">errorLogPrefix.</param>
        /// <param name="mailPassword">mailPassword.</param>
        /// <param name="mailTo">mailTo.</param>
        /// <param name="mailHost">mailHost.</param>
        /// <param name="mailPort">mailPort.</param>
        /// <param name="mailSslOptions">mailSslOptions.</param>
        /// <param name="clientSecretTransmissionMethod">clientSecretTransmissionMethod.</param>
        public IssuibleConfig(string mqVhost = default, string mqHostname = default, int? mqPort = default, bool? issuerSigningKeySetToAuto = default, string issuerSigningKey = default, bool? signingKeyFileSetToAuto = default, bool? clientIdSetToAuto = default, string clientId = default, string signingKeyFile = default, bool? clientSecretSetToAuto = default, string clientSecret = default, bool? clientSecretFilenameSetToAuto = default, string clientSecretFilename = default, string databaseType = default, string xmlStockPath = default, string sqliteDbCacheFilename = default, string mssqlServerHost = default, int? mssqlServerPort = default, string mssqlServerUsername = default, string mssqlServerPassword = default, string connectionString = default, string initialCatalog = default, string sink = default, string errorLogPrefix = default, string mailPassword = default, string mailTo = default, string mailHost = default, int? mailPort = default, string mailSslOptions = default, string clientSecretTransmissionMethod = default)
        {
            MqVhost = mqVhost;
            MqHostname = mqHostname;
            MqPort = mqPort;
            IssuerSigningKeySetToAuto = issuerSigningKeySetToAuto;
            IssuerSigningKey = issuerSigningKey;
            SigningKeyFileSetToAuto = signingKeyFileSetToAuto;
            ClientIdSetToAuto = clientIdSetToAuto;
            ClientId = clientId;
            SigningKeyFile = signingKeyFile;
            ClientSecretSetToAuto = clientSecretSetToAuto;
            ClientSecret = clientSecret;
            ClientSecretFilenameSetToAuto = clientSecretFilenameSetToAuto;
            ClientSecretFilename = clientSecretFilename;
            DatabaseType = databaseType;
            XmlStockPath = xmlStockPath;
            SqliteDbCacheFilename = sqliteDbCacheFilename;
            MssqlServerHost = mssqlServerHost;
            MssqlServerPort = mssqlServerPort;
            MssqlServerUsername = mssqlServerUsername;
            MssqlServerPassword = mssqlServerPassword;
            ConnectionString = connectionString;
            InitialCatalog = initialCatalog;
            Sink = sink;
            ErrorLogPrefix = errorLogPrefix;
            MailPassword = mailPassword;
            MailTo = mailTo;
            MailHost = mailHost;
            MailPort = mailPort;
            MailSslOptions = mailSslOptions;
            ClientSecretTransmissionMethod = clientSecretTransmissionMethod;
        }

        /// <summary>
        /// Gets or Sets MqVhost
        /// </summary>
        [DataMember(Name = "mqVhost", EmitDefaultValue = false)]
        public string MqVhost { get; set; }

        /// <summary>
        /// Gets or Sets MqHostname
        /// </summary>
        [DataMember(Name = "mqHostname", EmitDefaultValue = false)]
        public string MqHostname { get; set; }

        /// <summary>
        /// Gets or Sets MqPort
        /// </summary>
        [DataMember(Name = "mqPort", EmitDefaultValue = false)]
        public int? MqPort { get; set; }

        /// <summary>
        /// Gets or Sets IssuerSigningKeySetToAuto
        /// </summary>
        [DataMember(Name = "issuerSigningKeySetToAuto", EmitDefaultValue = false)]
        public bool? IssuerSigningKeySetToAuto { get; set; }

        /// <summary>
        /// Gets or Sets IssuerSigningKey
        /// </summary>
        [DataMember(Name = "issuerSigningKey", EmitDefaultValue = false)]
        public string IssuerSigningKey { get; set; }

        /// <summary>
        /// Gets or Sets SigningKeyFileSetToAuto
        /// </summary>
        [DataMember(Name = "signingKeyFileSetToAuto", EmitDefaultValue = false)]
        public bool? SigningKeyFileSetToAuto { get; set; }

        /// <summary>
        /// Gets or Sets ClientIdSetToAuto
        /// </summary>
        [DataMember(Name = "clientIdSetToAuto", EmitDefaultValue = false)]
        public bool? ClientIdSetToAuto { get; set; }

        /// <summary>
        /// Gets or Sets ClientId
        /// </summary>
        [DataMember(Name = "clientId", EmitDefaultValue = false)]
        public string ClientId { get; set; }

        /// <summary>
        /// Gets or Sets SigningKeyFile
        /// </summary>
        [DataMember(Name = "signingKeyFile", EmitDefaultValue = false)]
        public string SigningKeyFile { get; set; }

        /// <summary>
        /// Gets or Sets ClientSecretSetToAuto
        /// </summary>
        [DataMember(Name = "clientSecretSetToAuto", EmitDefaultValue = false)]
        public bool? ClientSecretSetToAuto { get; set; }

        /// <summary>
        /// Gets or Sets ClientSecret
        /// </summary>
        [DataMember(Name = "clientSecret", EmitDefaultValue = false)]
        public string ClientSecret { get; set; }

        /// <summary>
        /// Gets or Sets ClientSecretFilenameSetToAuto
        /// </summary>
        [DataMember(Name = "clientSecretFilenameSetToAuto", EmitDefaultValue = false)]
        public bool? ClientSecretFilenameSetToAuto { get; set; }

        /// <summary>
        /// Gets or Sets ClientSecretFilename
        /// </summary>
        [DataMember(Name = "clientSecretFilename", EmitDefaultValue = false)]
        public string ClientSecretFilename { get; set; }

        /// <summary>
        /// Gets or Sets DatabaseType
        /// </summary>
        [DataMember(Name = "databaseType", EmitDefaultValue = false)]
        public string DatabaseType { get; set; }

        /// <summary>
        /// Gets or Sets XmlStockPath
        /// </summary>
        [DataMember(Name = "xmlStockPath", EmitDefaultValue = false)]
        public string XmlStockPath { get; set; }

        /// <summary>
        /// Gets or Sets SqliteDbCacheFilename
        /// </summary>
        [DataMember(Name = "sqliteDbCacheFilename", EmitDefaultValue = false)]
        public string SqliteDbCacheFilename { get; set; }

        /// <summary>
        /// Gets or Sets MssqlServerHost
        /// </summary>
        [DataMember(Name = "mssqlServerHost", EmitDefaultValue = false)]
        public string MssqlServerHost { get; set; }

        /// <summary>
        /// Gets or Sets MssqlServerPort
        /// </summary>
        [DataMember(Name = "mssqlServerPort", EmitDefaultValue = false)]
        public int? MssqlServerPort { get; set; }

        /// <summary>
        /// Gets or Sets MssqlServerUsername
        /// </summary>
        [DataMember(Name = "mssqlServerUsername", EmitDefaultValue = false)]
        public string MssqlServerUsername { get; set; }

        /// <summary>
        /// Gets or Sets MssqlServerPassword
        /// </summary>
        [DataMember(Name = "mssqlServerPassword", EmitDefaultValue = false)]
        public string MssqlServerPassword { get; set; }

        /// <summary>
        /// Gets or Sets ConnectionString
        /// </summary>
        [DataMember(Name = "connectionString", EmitDefaultValue = false)]
        public string ConnectionString { get; set; }

        /// <summary>
        /// Gets or Sets InitialCatalog
        /// </summary>
        [DataMember(Name = "initialCatalog", EmitDefaultValue = false)]
        public string InitialCatalog { get; set; }

        /// <summary>
        /// Gets or Sets Sink
        /// </summary>
        [DataMember(Name = "sink", EmitDefaultValue = false)]
        public string Sink { get; set; }

        /// <summary>
        /// Gets or Sets ErrorLogPrefix
        /// </summary>
        [DataMember(Name = "errorLogPrefix", EmitDefaultValue = false)]
        public string ErrorLogPrefix { get; set; }

        /// <summary>
        /// Gets or Sets MailPassword
        /// </summary>
        [DataMember(Name = "mailPassword", EmitDefaultValue = false)]
        public string MailPassword { get; set; }

        /// <summary>
        /// Gets or Sets MailTo
        /// </summary>
        [DataMember(Name = "mailTo", EmitDefaultValue = false)]
        public string MailTo { get; set; }

        /// <summary>
        /// Gets or Sets MailHost
        /// </summary>
        [DataMember(Name = "mailHost", EmitDefaultValue = false)]
        public string MailHost { get; set; }

        /// <summary>
        /// Gets or Sets MailPort
        /// </summary>
        [DataMember(Name = "mailPort", EmitDefaultValue = false)]
        public int? MailPort { get; set; }

        /// <summary>
        /// Gets or Sets MailSslOptions
        /// </summary>
        [DataMember(Name = "mailSslOptions", EmitDefaultValue = false)]
        public string MailSslOptions { get; set; }

        /// <summary>
        /// Gets or Sets ClientSecretTransmissionMethod
        /// </summary>
        [DataMember(Name = "clientSecretTransmissionMethod", EmitDefaultValue = false)]
        public string ClientSecretTransmissionMethod { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class IssuibleConfig {\n");
            sb.Append("  MqVhost: ").Append(MqVhost).Append("\n");
            sb.Append("  MqHostname: ").Append(MqHostname).Append("\n");
            sb.Append("  MqPort: ").Append(MqPort).Append("\n");
            sb.Append("  IssuerSigningKeySetToAuto: ").Append(IssuerSigningKeySetToAuto).Append("\n");
            sb.Append("  IssuerSigningKey: ").Append(IssuerSigningKey).Append("\n");
            sb.Append("  SigningKeyFileSetToAuto: ").Append(SigningKeyFileSetToAuto).Append("\n");
            sb.Append("  ClientIdSetToAuto: ").Append(ClientIdSetToAuto).Append("\n");
            sb.Append("  ClientId: ").Append(ClientId).Append("\n");
            sb.Append("  SigningKeyFile: ").Append(SigningKeyFile).Append("\n");
            sb.Append("  ClientSecretSetToAuto: ").Append(ClientSecretSetToAuto).Append("\n");
            sb.Append("  ClientSecret: ").Append(ClientSecret).Append("\n");
            sb.Append("  ClientSecretFilenameSetToAuto: ").Append(ClientSecretFilenameSetToAuto).Append("\n");
            sb.Append("  ClientSecretFilename: ").Append(ClientSecretFilename).Append("\n");
            sb.Append("  DatabaseType: ").Append(DatabaseType).Append("\n");
            sb.Append("  XmlStockPath: ").Append(XmlStockPath).Append("\n");
            sb.Append("  SqliteDbCacheFilename: ").Append(SqliteDbCacheFilename).Append("\n");
            sb.Append("  MssqlServerHost: ").Append(MssqlServerHost).Append("\n");
            sb.Append("  MssqlServerPort: ").Append(MssqlServerPort).Append("\n");
            sb.Append("  MssqlServerUsername: ").Append(MssqlServerUsername).Append("\n");
            sb.Append("  MssqlServerPassword: ").Append(MssqlServerPassword).Append("\n");
            sb.Append("  ConnectionString: ").Append(ConnectionString).Append("\n");
            sb.Append("  InitialCatalog: ").Append(InitialCatalog).Append("\n");
            sb.Append("  Sink: ").Append(Sink).Append("\n");
            sb.Append("  ErrorLogPrefix: ").Append(ErrorLogPrefix).Append("\n");
            sb.Append("  MailPassword: ").Append(MailPassword).Append("\n");
            sb.Append("  MailTo: ").Append(MailTo).Append("\n");
            sb.Append("  MailHost: ").Append(MailHost).Append("\n");
            sb.Append("  MailPort: ").Append(MailPort).Append("\n");
            sb.Append("  MailSslOptions: ").Append(MailSslOptions).Append("\n");
            sb.Append("  ClientSecretTransmissionMethod: ").Append(ClientSecretTransmissionMethod).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as IssuibleConfig);
        }

        /// <summary>
        /// Returns true if IssuibleConfig instances are equal
        /// </summary>
        /// <param name="input">Instance of IssuibleConfig to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(IssuibleConfig input)
        {
            if (input == null)
                return false;

            return
                (
                    MqVhost == input.MqVhost ||
                    MqVhost != null &&
                    MqVhost.Equals(input.MqVhost)
                ) &&
                (
                    MqHostname == input.MqHostname ||
                    MqHostname != null &&
                    MqHostname.Equals(input.MqHostname)
                ) &&
                (
                    MqPort == input.MqPort ||
                    MqPort != null &&
                    MqPort.Equals(input.MqPort)
                ) &&
                (
                    IssuerSigningKeySetToAuto == input.IssuerSigningKeySetToAuto ||
                    IssuerSigningKeySetToAuto != null &&
                    IssuerSigningKeySetToAuto.Equals(input.IssuerSigningKeySetToAuto)
                ) &&
                (
                    IssuerSigningKey == input.IssuerSigningKey ||
                    IssuerSigningKey != null &&
                    IssuerSigningKey.Equals(input.IssuerSigningKey)
                ) &&
                (
                    SigningKeyFileSetToAuto == input.SigningKeyFileSetToAuto ||
                    SigningKeyFileSetToAuto != null &&
                    SigningKeyFileSetToAuto.Equals(input.SigningKeyFileSetToAuto)
                ) &&
                (
                    ClientIdSetToAuto == input.ClientIdSetToAuto ||
                    ClientIdSetToAuto != null &&
                    ClientIdSetToAuto.Equals(input.ClientIdSetToAuto)
                ) &&
                (
                    ClientId == input.ClientId ||
                    ClientId != null &&
                    ClientId.Equals(input.ClientId)
                ) &&
                (
                    SigningKeyFile == input.SigningKeyFile ||
                    SigningKeyFile != null &&
                    SigningKeyFile.Equals(input.SigningKeyFile)
                ) &&
                (
                    ClientSecretSetToAuto == input.ClientSecretSetToAuto ||
                    ClientSecretSetToAuto != null &&
                    ClientSecretSetToAuto.Equals(input.ClientSecretSetToAuto)
                ) &&
                (
                    ClientSecret == input.ClientSecret ||
                    ClientSecret != null &&
                    ClientSecret.Equals(input.ClientSecret)
                ) &&
                (
                    ClientSecretFilenameSetToAuto == input.ClientSecretFilenameSetToAuto ||
                    ClientSecretFilenameSetToAuto != null &&
                    ClientSecretFilenameSetToAuto.Equals(input.ClientSecretFilenameSetToAuto)
                ) &&
                (
                    ClientSecretFilename == input.ClientSecretFilename ||
                    ClientSecretFilename != null &&
                    ClientSecretFilename.Equals(input.ClientSecretFilename)
                ) &&
                (
                    DatabaseType == input.DatabaseType ||
                    DatabaseType != null &&
                    DatabaseType.Equals(input.DatabaseType)
                ) &&
                (
                    XmlStockPath == input.XmlStockPath ||
                    XmlStockPath != null &&
                    XmlStockPath.Equals(input.XmlStockPath)
                ) &&
                (
                    SqliteDbCacheFilename == input.SqliteDbCacheFilename ||
                    SqliteDbCacheFilename != null &&
                    SqliteDbCacheFilename.Equals(input.SqliteDbCacheFilename)
                ) &&
                (
                    MssqlServerHost == input.MssqlServerHost ||
                    MssqlServerHost != null &&
                    MssqlServerHost.Equals(input.MssqlServerHost)
                ) &&
                (
                    MssqlServerPort == input.MssqlServerPort ||
                    MssqlServerPort != null &&
                    MssqlServerPort.Equals(input.MssqlServerPort)
                ) &&
                (
                    MssqlServerUsername == input.MssqlServerUsername ||
                    MssqlServerUsername != null &&
                    MssqlServerUsername.Equals(input.MssqlServerUsername)
                ) &&
                (
                    MssqlServerPassword == input.MssqlServerPassword ||
                    MssqlServerPassword != null &&
                    MssqlServerPassword.Equals(input.MssqlServerPassword)
                ) &&
                (
                    ConnectionString == input.ConnectionString ||
                    ConnectionString != null &&
                    ConnectionString.Equals(input.ConnectionString)
                ) &&
                (
                    InitialCatalog == input.InitialCatalog ||
                    InitialCatalog != null &&
                    InitialCatalog.Equals(input.InitialCatalog)
                ) &&
                (
                    Sink == input.Sink ||
                    Sink != null &&
                    Sink.Equals(input.Sink)
                ) &&
                (
                    ErrorLogPrefix == input.ErrorLogPrefix ||
                    ErrorLogPrefix != null &&
                    ErrorLogPrefix.Equals(input.ErrorLogPrefix)
                ) &&
                (
                    MailPassword == input.MailPassword ||
                    MailPassword != null &&
                    MailPassword.Equals(input.MailPassword)
                ) &&
                (
                    MailTo == input.MailTo ||
                    MailTo != null &&
                    MailTo.Equals(input.MailTo)
                ) &&
                (
                    MailHost == input.MailHost ||
                    MailHost != null &&
                    MailHost.Equals(input.MailHost)
                ) &&
                (
                    MailPort == input.MailPort ||
                    MailPort != null &&
                    MailPort.Equals(input.MailPort)
                ) &&
                (
                    MailSslOptions == input.MailSslOptions ||
                    MailSslOptions != null &&
                    MailSslOptions.Equals(input.MailSslOptions)
                ) &&
                (
                    ClientSecretTransmissionMethod == input.ClientSecretTransmissionMethod ||
                    ClientSecretTransmissionMethod != null &&
                    ClientSecretTransmissionMethod.Equals(input.ClientSecretTransmissionMethod)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (MqVhost != null)
                    hashCode = hashCode * 59 + MqVhost.GetHashCode();
                if (MqHostname != null)
                    hashCode = hashCode * 59 + MqHostname.GetHashCode();
                if (MqPort != null)
                    hashCode = hashCode * 59 + MqPort.GetHashCode();
                if (IssuerSigningKeySetToAuto != null)
                    hashCode = hashCode * 59 + IssuerSigningKeySetToAuto.GetHashCode();
                if (IssuerSigningKey != null)
                    hashCode = hashCode * 59 + IssuerSigningKey.GetHashCode();
                if (SigningKeyFileSetToAuto != null)
                    hashCode = hashCode * 59 + SigningKeyFileSetToAuto.GetHashCode();
                if (ClientIdSetToAuto != null)
                    hashCode = hashCode * 59 + ClientIdSetToAuto.GetHashCode();
                if (ClientId != null)
                    hashCode = hashCode * 59 + ClientId.GetHashCode();
                if (SigningKeyFile != null)
                    hashCode = hashCode * 59 + SigningKeyFile.GetHashCode();
                if (ClientSecretSetToAuto != null)
                    hashCode = hashCode * 59 + ClientSecretSetToAuto.GetHashCode();
                if (ClientSecret != null)
                    hashCode = hashCode * 59 + ClientSecret.GetHashCode();
                if (ClientSecretFilenameSetToAuto != null)
                    hashCode = hashCode * 59 + ClientSecretFilenameSetToAuto.GetHashCode();
                if (ClientSecretFilename != null)
                    hashCode = hashCode * 59 + ClientSecretFilename.GetHashCode();
                if (DatabaseType != null)
                    hashCode = hashCode * 59 + DatabaseType.GetHashCode();
                if (XmlStockPath != null)
                    hashCode = hashCode * 59 + XmlStockPath.GetHashCode();
                if (SqliteDbCacheFilename != null)
                    hashCode = hashCode * 59 + SqliteDbCacheFilename.GetHashCode();
                if (MssqlServerHost != null)
                    hashCode = hashCode * 59 + MssqlServerHost.GetHashCode();
                if (MssqlServerPort != null)
                    hashCode = hashCode * 59 + MssqlServerPort.GetHashCode();
                if (MssqlServerUsername != null)
                    hashCode = hashCode * 59 + MssqlServerUsername.GetHashCode();
                if (MssqlServerPassword != null)
                    hashCode = hashCode * 59 + MssqlServerPassword.GetHashCode();
                if (ConnectionString != null)
                    hashCode = hashCode * 59 + ConnectionString.GetHashCode();
                if (InitialCatalog != null)
                    hashCode = hashCode * 59 + InitialCatalog.GetHashCode();
                if (Sink != null)
                    hashCode = hashCode * 59 + Sink.GetHashCode();
                if (ErrorLogPrefix != null)
                    hashCode = hashCode * 59 + ErrorLogPrefix.GetHashCode();
                if (MailPassword != null)
                    hashCode = hashCode * 59 + MailPassword.GetHashCode();
                if (MailTo != null)
                    hashCode = hashCode * 59 + MailTo.GetHashCode();
                if (MailHost != null)
                    hashCode = hashCode * 59 + MailHost.GetHashCode();
                if (MailPort != null)
                    hashCode = hashCode * 59 + MailPort.GetHashCode();
                if (MailSslOptions != null)
                    hashCode = hashCode * 59 + MailSslOptions.GetHashCode();
                if (ClientSecretTransmissionMethod != null)
                    hashCode = hashCode * 59 + ClientSecretTransmissionMethod.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
