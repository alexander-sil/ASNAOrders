/*
 * API для интеграции сервиса Яндекс.Еда
 *
 * Описание API для работы с сервисом Яндекс.Еда по моделям \"Доставка Яндекс Едой\",  \"Доставка партнером\" и \"Самовывоз\". Все методы описанные ниже должны быть реализованы на стороне партнера в процессе интеграции. Т.е. сервис Яндекс.Еда выступает в роли клиента, а Вам необходимо реализовать серверную часть. Взаимодействие происходит на основании pull-модели, т.е. сервис Яндекс Еда как клиент запрашивает данные либо может создавать/обновлять данные если это необходимо.  # Authentication  <!- - ReDoc-Inject: <security-definitions> - ->
 *
 * The version of the OpenAPI document: 1.0-oas3
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using ASNAOrders.Web.Converters;

namespace ASNAOrders.Web.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class OrderStatus : IEquatable<OrderStatus>
    {

        /// <summary>
        /// Статус заказа. Должен быть допустимым - т.е. собранный заказ нельзя снова сделать новым. Переход по статусам возможен только в указанном направлении - от NEW до DELIVERED. Исключения: в статус CANCELLED заказ может перейти на любом этапе. Описание статусов: NEW - новый, только отправлен в систему партнера. ACCEPTED_BY_RESTAURANT - заказ подтвержден партнером. COOKING - началась сборка заказа. READY - заказ собран. TAKEN_BY_COURIER - курьер забрал заказ из магазина. DELIVERED - заказ завершен. CANCELLED - заказ отменён. Порядок статусов: NEW -> ACCEPTED_BY_RESTAURANT -> COOKING -> READY -> TAKEN_BY_COURIER -> DELIVERED. Из любого статуса -> CANCELLED
        /// </summary>
        /// <value>Статус заказа. Должен быть допустимым - т.е. собранный заказ нельзя снова сделать новым. Переход по статусам возможен только в указанном направлении - от NEW до DELIVERED. Исключения: в статус CANCELLED заказ может перейти на любом этапе. Описание статусов: NEW - новый, только отправлен в систему партнера. ACCEPTED_BY_RESTAURANT - заказ подтвержден партнером. COOKING - началась сборка заказа. READY - заказ собран. TAKEN_BY_COURIER - курьер забрал заказ из магазина. DELIVERED - заказ завершен. CANCELLED - заказ отменён. Порядок статусов: NEW -> ACCEPTED_BY_RESTAURANT -> COOKING -> READY -> TAKEN_BY_COURIER -> DELIVERED. Из любого статуса -> CANCELLED</value>
        [TypeConverter(typeof(CustomEnumConverter<StatusEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum StatusEnum
        {
            
            /// <summary>
            /// Enum NEWEnum for NEW
            /// </summary>
            [EnumMember(Value = "NEW")]
            NEWEnum = 1,
            
            /// <summary>
            /// Enum ACCEPTEDBYRESTAURANTEnum for ACCEPTED_BY_RESTAURANT
            /// </summary>
            [EnumMember(Value = "ACCEPTED_BY_RESTAURANT")]
            ACCEPTEDBYRESTAURANTEnum = 2,
            
            /// <summary>
            /// Enum COOKINGEnum for COOKING
            /// </summary>
            [EnumMember(Value = "COOKING")]
            COOKINGEnum = 3,
            
            /// <summary>
            /// Enum READYEnum for READY
            /// </summary>
            [EnumMember(Value = "READY")]
            READYEnum = 4,
            
            /// <summary>
            /// Enum TAKENBYCOURIEREnum for TAKEN_BY_COURIER
            /// </summary>
            [EnumMember(Value = "TAKEN_BY_COURIER")]
            TAKENBYCOURIEREnum = 5,
            
            /// <summary>
            /// Enum DELIVEREDEnum for DELIVERED
            /// </summary>
            [EnumMember(Value = "DELIVERED")]
            DELIVEREDEnum = 6,
            
            /// <summary>
            /// Enum CANCELLEDEnum for CANCELLED
            /// </summary>
            [EnumMember(Value = "CANCELLED")]
            CANCELLEDEnum = 7
        }

        /// <summary>
        /// Статус заказа. Должен быть допустимым - т.е. собранный заказ нельзя снова сделать новым. Переход по статусам возможен только в указанном направлении - от NEW до DELIVERED. Исключения: в статус CANCELLED заказ может перейти на любом этапе. Описание статусов: NEW - новый, только отправлен в систему партнера. ACCEPTED_BY_RESTAURANT - заказ подтвержден партнером. COOKING - началась сборка заказа. READY - заказ собран. TAKEN_BY_COURIER - курьер забрал заказ из магазина. DELIVERED - заказ завершен. CANCELLED - заказ отменён. Порядок статусов: NEW -&gt; ACCEPTED_BY_RESTAURANT -&gt; COOKING -&gt; READY -&gt; TAKEN_BY_COURIER -&gt; DELIVERED. Из любого статуса -&gt; CANCELLED
        /// </summary>
        /// <value>Статус заказа. Должен быть допустимым - т.е. собранный заказ нельзя снова сделать новым. Переход по статусам возможен только в указанном направлении - от NEW до DELIVERED. Исключения: в статус CANCELLED заказ может перейти на любом этапе. Описание статусов: NEW - новый, только отправлен в систему партнера. ACCEPTED_BY_RESTAURANT - заказ подтвержден партнером. COOKING - началась сборка заказа. READY - заказ собран. TAKEN_BY_COURIER - курьер забрал заказ из магазина. DELIVERED - заказ завершен. CANCELLED - заказ отменён. Порядок статусов: NEW -&gt; ACCEPTED_BY_RESTAURANT -&gt; COOKING -&gt; READY -&gt; TAKEN_BY_COURIER -&gt; DELIVERED. Из любого статуса -&gt; CANCELLED</value>
        [Required]
        [DataMember(Name="status", EmitDefaultValue=true)]
        public StatusEnum Status { get; set; }

        /// <summary>
        /// Комментарий к смене статуса
        /// </summary>
        /// <value>Комментарий к смене статуса</value>
        [MaxLength(500)]
        [DataMember(Name="comment", EmitDefaultValue=false)]
        public string Comment { get; set; }

        /// <summary>
        /// Дата, когда сменился статус заказа, в формате RFC3339 с дробной частью секунд (Y-m-d\\\\TH:i:s.uP)
        /// </summary>
        /// <value>Дата, когда сменился статус заказа, в формате RFC3339 с дробной частью секунд (Y-m-d\\\\TH:i:s.uP)</value>
        /// <example>1970-01-01T00:00:27.870+00:20</example>
        [DataMember(Name="updatedAt", EmitDefaultValue=false)]
        public DateTime UpdatedAt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrderStatus {\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Comment: ").Append(Comment).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((OrderStatus)obj);
        }

        /// <summary>
        /// Returns true if OrderStatus instances are equal
        /// </summary>
        /// <param name="other">Instance of OrderStatus to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrderStatus other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Status == other.Status ||
                    
                    Status.Equals(other.Status)
                ) && 
                (
                    Comment == other.Comment ||
                    Comment != null &&
                    Comment.Equals(other.Comment)
                ) && 
                (
                    UpdatedAt == other.UpdatedAt ||
                    UpdatedAt != null &&
                    UpdatedAt.Equals(other.UpdatedAt)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + Status.GetHashCode();
                    if (Comment != null)
                    hashCode = hashCode * 59 + Comment.GetHashCode();
                    if (UpdatedAt != null)
                    hashCode = hashCode * 59 + UpdatedAt.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(OrderStatus left, OrderStatus right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(OrderStatus left, OrderStatus right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
