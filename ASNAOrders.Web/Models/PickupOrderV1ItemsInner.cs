/*
 * API для интеграции сервиса Яндекс.Еда
 *
 * Описание API для работы с сервисом Яндекс.Еда по моделям \"Доставка Яндекс Едой\",  \"Доставка партнером\" и \"Самовывоз\". Все методы описанные ниже должны быть реализованы на стороне партнера в процессе интеграции. Т.е. сервис Яндекс.Еда выступает в роли клиента, а Вам необходимо реализовать серверную часть. Взаимодействие происходит на основании pull-модели, т.е. сервис Яндекс Еда как клиент запрашивает данные либо может создавать/обновлять данные если это необходимо.  # Authentication  <!- - ReDoc-Inject: <security-definitions> - ->
 *
 * The version of the OpenAPI document: 1.0-oas3
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using ASNAOrders.Web.Converters;

namespace ASNAOrders.Web.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class PickupOrderV1ItemsInner : IEquatable<PickupOrderV1ItemsInner>
    {
        /// <summary>
        /// Внутренний уникальный идентификатор товара в системе партнера
        /// </summary>
        /// <value>Внутренний уникальный идентификатор товара в системе партнера</value>
        /// <example>some-uniq-identifier</example>
        [Required]
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Наименование товара
        /// </summary>
        /// <value>Наименование товара</value>
        /// <example>Молоко Домик в деревне</example>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Количество позиции в заказе
        /// </summary>
        /// <value>Количество позиции в заказе</value>
        /// <example>3</example>
        [Required]
        [DataMember(Name="quantity", EmitDefaultValue=true)]
        public float Quantity { get; set; }

        /// <summary>
        /// Цена одной штуки товара. Для весовых товаров цена передается за 1 кг
        /// </summary>
        /// <value>Цена одной штуки товара. Для весовых товаров цена передается за 1 кг</value>
        /// <example>84</example>
        [Required]
        [DataMember(Name="price", EmitDefaultValue=true)]
        public double Price { get; set; }

        /// <summary>
        /// Параметр не поддерживается в интеграции магазинов и передается пустым
        /// </summary>
        /// <value>Параметр не поддерживается в интеграции магазинов и передается пустым</value>
        [Required]
        [DataMember(Name="modifications", EmitDefaultValue=false)]
        public List<YandexOrderCreateItemsInnerModificationsInner> Modifications { get; set; }

        /// <summary>
        /// Параметр не поддерживается в интеграции магазинов и передается пустым
        /// </summary>
        /// <value>Параметр не поддерживается в интеграции магазинов и передается пустым</value>
        [Required]
        [DataMember(Name="promos", EmitDefaultValue=false)]
        public List<YandexOrderCreatePromosInner> Promos { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PickupOrderV1ItemsInner {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  Modifications: ").Append(Modifications).Append("\n");
            sb.Append("  Promos: ").Append(Promos).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((PickupOrderV1ItemsInner)obj);
        }

        /// <summary>
        /// Returns true if PickupOrderV1ItemsInner instances are equal
        /// </summary>
        /// <param name="other">Instance of PickupOrderV1ItemsInner to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PickupOrderV1ItemsInner other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    Quantity == other.Quantity ||
                    
                    Quantity.Equals(other.Quantity)
                ) && 
                (
                    Price == other.Price ||
                    
                    Price.Equals(other.Price)
                ) && 
                (
                    Modifications == other.Modifications ||
                    Modifications != null &&
                    other.Modifications != null &&
                    Modifications.SequenceEqual(other.Modifications)
                ) && 
                (
                    Promos == other.Promos ||
                    Promos != null &&
                    other.Promos != null &&
                    Promos.SequenceEqual(other.Promos)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    
                    hashCode = hashCode * 59 + Quantity.GetHashCode();
                    
                    hashCode = hashCode * 59 + Price.GetHashCode();
                    if (Modifications != null)
                    hashCode = hashCode * 59 + Modifications.GetHashCode();
                    if (Promos != null)
                    hashCode = hashCode * 59 + Promos.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(PickupOrderV1ItemsInner left, PickupOrderV1ItemsInner right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(PickupOrderV1ItemsInner left, PickupOrderV1ItemsInner right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
