/*
 * API для интеграции сервиса Яндекс.Еда
 *
 * Описание API для работы с сервисом Яндекс.Еда по моделям \"Доставка Яндекс Едой\",  \"Доставка партнером\" и \"Самовывоз\". Все методы описанные ниже должны быть реализованы на стороне партнера в процессе интеграции. Т.е. сервис Яндекс.Еда выступает в роли клиента, а Вам необходимо реализовать серверную часть. Взаимодействие происходит на основании pull-модели, т.е. сервис Яндекс Еда как клиент запрашивает данные либо может создавать/обновлять данные если это необходимо.  # Authentication  <!- - ReDoc-Inject: <security-definitions> - ->
 *
 * The version of the OpenAPI document: 1.0-oas3
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using ASNAOrders.Web.Converters;

namespace ASNAOrders.Web.Models
{ 
    /// <summary>
    /// Штрихкод товара
    /// </summary>
    [DataContract]
    public partial class NomenclatureItemsInnerBarcode : IEquatable<NomenclatureItemsInnerBarcode>
    {
        /// <summary>
        /// Штрихкод товара
        /// </summary>
        /// <value>Штрихкод товара</value>
        /// <example>987654321098</example>
        [Required]
        [DataMember(Name="value", EmitDefaultValue=false)]
        public string Value { get; set; }

        /// <summary>
        /// Список штрихкодов товара
        /// </summary>
        /// <value>Список штрихкодов товара</value>
        [DataMember(Name="values", EmitDefaultValue=false)]
        public List<string> Values { get; set; }


        /// <summary>
        /// Тип штрихкода
        /// </summary>
        /// <value>Тип штрихкода</value>
        [TypeConverter(typeof(CustomEnumConverter<TypeEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum TypeEnum
        {
            
            /// <summary>
            /// Enum AuspostEnum for auspost
            /// </summary>
            [EnumMember(Value = "auspost")]
            AuspostEnum = 1,
            
            /// <summary>
            /// Enum AusredirectEnum for ausredirect
            /// </summary>
            [EnumMember(Value = "ausredirect")]
            AusredirectEnum = 2,
            
            /// <summary>
            /// Enum AusreplyEnum for ausreply
            /// </summary>
            [EnumMember(Value = "ausreply")]
            AusreplyEnum = 3,
            
            /// <summary>
            /// Enum AusrouteEnum for ausroute
            /// </summary>
            [EnumMember(Value = "ausroute")]
            AusrouteEnum = 4,
            
            /// <summary>
            /// Enum AztecEnum for aztec
            /// </summary>
            [EnumMember(Value = "aztec")]
            AztecEnum = 5,
            
            /// <summary>
            /// Enum C25iataEnum for c25iata
            /// </summary>
            [EnumMember(Value = "c25iata")]
            C25iataEnum = 6,
            
            /// <summary>
            /// Enum C25indEnum for c25ind
            /// </summary>
            [EnumMember(Value = "c25ind")]
            C25indEnum = 7,
            
            /// <summary>
            /// Enum C25interEnum for c25inter
            /// </summary>
            [EnumMember(Value = "c25inter")]
            C25interEnum = 8,
            
            /// <summary>
            /// Enum C25logicEnum for c25logic
            /// </summary>
            [EnumMember(Value = "c25logic")]
            C25logicEnum = 9,
            
            /// <summary>
            /// Enum C25matrixEnum for c25matrix
            /// </summary>
            [EnumMember(Value = "c25matrix")]
            C25matrixEnum = 10,
            
            /// <summary>
            /// Enum CodabarEnum for codabar
            /// </summary>
            [EnumMember(Value = "codabar")]
            CodabarEnum = 11,
            
            /// <summary>
            /// Enum CodablockfEnum for codablockf
            /// </summary>
            [EnumMember(Value = "codablockf")]
            CodablockfEnum = 12,
            
            /// <summary>
            /// Enum Code11Enum for code11
            /// </summary>
            [EnumMember(Value = "code11")]
            Code11Enum = 13,
            
            /// <summary>
            /// Enum Code100Enum for code100
            /// </summary>
            [EnumMember(Value = "code100")]
            Code100Enum = 14,
            
            /// <summary>
            /// Enum Code128Enum for code128
            /// </summary>
            [EnumMember(Value = "code128")]
            Code128Enum = 15,
            
            /// <summary>
            /// Enum Code128bEnum for code128b
            /// </summary>
            [EnumMember(Value = "code128b")]
            Code128bEnum = 16,
            
            /// <summary>
            /// Enum Code16kEnum for code16k
            /// </summary>
            [EnumMember(Value = "code16k")]
            Code16kEnum = 17,
            
            /// <summary>
            /// Enum Code39Enum for code39
            /// </summary>
            [EnumMember(Value = "code39")]
            Code39Enum = 18,
            
            /// <summary>
            /// Enum Code49Enum for code49
            /// </summary>
            [EnumMember(Value = "code49")]
            Code49Enum = 19,
            
            /// <summary>
            /// Enum Code93Enum for code93
            /// </summary>
            [EnumMember(Value = "code93")]
            Code93Enum = 20,
            
            /// <summary>
            /// Enum DaftEnum for daft
            /// </summary>
            [EnumMember(Value = "daft")]
            DaftEnum = 21,
            
            /// <summary>
            /// Enum DatamatrixEnum for datamatrix
            /// </summary>
            [EnumMember(Value = "datamatrix")]
            DatamatrixEnum = 22,
            
            /// <summary>
            /// Enum DotcodeEnum for dotcode
            /// </summary>
            [EnumMember(Value = "dotcode")]
            DotcodeEnum = 23,
            
            /// <summary>
            /// Enum DpidentEnum for dpident
            /// </summary>
            [EnumMember(Value = "dpident")]
            DpidentEnum = 24,
            
            /// <summary>
            /// Enum DpleitEnum for dpleit
            /// </summary>
            [EnumMember(Value = "dpleit")]
            DpleitEnum = 25,
            
            /// <summary>
            /// Enum Ean128Enum for ean128
            /// </summary>
            [EnumMember(Value = "ean128")]
            Ean128Enum = 26,
            
            /// <summary>
            /// Enum Ean13Enum for ean13
            /// </summary>
            [EnumMember(Value = "ean13")]
            Ean13Enum = 27,
            
            /// <summary>
            /// Enum Ean14Enum for ean14
            /// </summary>
            [EnumMember(Value = "ean14")]
            Ean14Enum = 28,
            
            /// <summary>
            /// Enum EanxEnum for eanx
            /// </summary>
            [EnumMember(Value = "eanx")]
            EanxEnum = 29,
            
            /// <summary>
            /// Enum EanxChkEnum for eanx_chk
            /// </summary>
            [EnumMember(Value = "eanx_chk")]
            EanxChkEnum = 30,
            
            /// <summary>
            /// Enum Excode39Enum for excode39
            /// </summary>
            [EnumMember(Value = "excode39")]
            Excode39Enum = 31,
            
            /// <summary>
            /// Enum FimEnum for fim
            /// </summary>
            [EnumMember(Value = "fim")]
            FimEnum = 32,
            
            /// <summary>
            /// Enum FlatEnum for flat
            /// </summary>
            [EnumMember(Value = "flat")]
            FlatEnum = 33,
            
            /// <summary>
            /// Enum HanxinEnum for hanxin
            /// </summary>
            [EnumMember(Value = "hanxin")]
            HanxinEnum = 34,
            
            /// <summary>
            /// Enum Hibc128Enum for hibc_128
            /// </summary>
            [EnumMember(Value = "hibc_128")]
            Hibc128Enum = 35,
            
            /// <summary>
            /// Enum Hibc39Enum for hibc_39
            /// </summary>
            [EnumMember(Value = "hibc_39")]
            Hibc39Enum = 36,
            
            /// <summary>
            /// Enum HibcAztecEnum for hibc_aztec
            /// </summary>
            [EnumMember(Value = "hibc_aztec")]
            HibcAztecEnum = 37,
            
            /// <summary>
            /// Enum HibcBlockfEnum for hibc_blockf
            /// </summary>
            [EnumMember(Value = "hibc_blockf")]
            HibcBlockfEnum = 38,
            
            /// <summary>
            /// Enum HibcDmEnum for hibc_dm
            /// </summary>
            [EnumMember(Value = "hibc_dm")]
            HibcDmEnum = 39,
            
            /// <summary>
            /// Enum HibcMicpdfEnum for hibc_micpdf
            /// </summary>
            [EnumMember(Value = "hibc_micpdf")]
            HibcMicpdfEnum = 40,
            
            /// <summary>
            /// Enum HibcPdfEnum for hibc_pdf
            /// </summary>
            [EnumMember(Value = "hibc_pdf")]
            HibcPdfEnum = 41,
            
            /// <summary>
            /// Enum HibcQrEnum for hibc_qr
            /// </summary>
            [EnumMember(Value = "hibc_qr")]
            HibcQrEnum = 42,
            
            /// <summary>
            /// Enum IsbnxEnum for isbnx
            /// </summary>
            [EnumMember(Value = "isbnx")]
            IsbnxEnum = 43,
            
            /// <summary>
            /// Enum Itf14Enum for itf14
            /// </summary>
            [EnumMember(Value = "itf14")]
            Itf14Enum = 44,
            
            /// <summary>
            /// Enum JapanpostEnum for japanpost
            /// </summary>
            [EnumMember(Value = "japanpost")]
            JapanpostEnum = 45,
            
            /// <summary>
            /// Enum KixEnum for kix
            /// </summary>
            [EnumMember(Value = "kix")]
            KixEnum = 46,
            
            /// <summary>
            /// Enum KoreapostEnum for koreapost
            /// </summary>
            [EnumMember(Value = "koreapost")]
            KoreapostEnum = 47,
            
            /// <summary>
            /// Enum LogmarsEnum for logmars
            /// </summary>
            [EnumMember(Value = "logmars")]
            LogmarsEnum = 48,
            
            /// <summary>
            /// Enum MailmarkEnum for mailmark
            /// </summary>
            [EnumMember(Value = "mailmark")]
            MailmarkEnum = 49,
            
            /// <summary>
            /// Enum MaxicodeEnum for maxicode
            /// </summary>
            [EnumMember(Value = "maxicode")]
            MaxicodeEnum = 50,
            
            /// <summary>
            /// Enum Micropdf417Enum for micropdf417
            /// </summary>
            [EnumMember(Value = "micropdf417")]
            Micropdf417Enum = 51,
            
            /// <summary>
            /// Enum MicroqrEnum for microqr
            /// </summary>
            [EnumMember(Value = "microqr")]
            MicroqrEnum = 52,
            
            /// <summary>
            /// Enum MsiPlesseyEnum for msi_plessey
            /// </summary>
            [EnumMember(Value = "msi_plessey")]
            MsiPlesseyEnum = 53,
            
            /// <summary>
            /// Enum Nve18Enum for nve18
            /// </summary>
            [EnumMember(Value = "nve18")]
            Nve18Enum = 54,
            
            /// <summary>
            /// Enum OnecodeEnum for onecode
            /// </summary>
            [EnumMember(Value = "onecode")]
            OnecodeEnum = 55,
            
            /// <summary>
            /// Enum Pdf417Enum for pdf417
            /// </summary>
            [EnumMember(Value = "pdf417")]
            Pdf417Enum = 56,
            
            /// <summary>
            /// Enum Pdf417truncEnum for pdf417trunc
            /// </summary>
            [EnumMember(Value = "pdf417trunc")]
            Pdf417truncEnum = 57,
            
            /// <summary>
            /// Enum PharmaEnum for pharma
            /// </summary>
            [EnumMember(Value = "pharma")]
            PharmaEnum = 58,
            
            /// <summary>
            /// Enum PharmaTwoEnum for pharma_two
            /// </summary>
            [EnumMember(Value = "pharma_two")]
            PharmaTwoEnum = 59,
            
            /// <summary>
            /// Enum PlanetEnum for planet
            /// </summary>
            [EnumMember(Value = "planet")]
            PlanetEnum = 60,
            
            /// <summary>
            /// Enum PlesseyEnum for plessey
            /// </summary>
            [EnumMember(Value = "plessey")]
            PlesseyEnum = 61,
            
            /// <summary>
            /// Enum PostnetEnum for postnet
            /// </summary>
            [EnumMember(Value = "postnet")]
            PostnetEnum = 62,
            
            /// <summary>
            /// Enum PznEnum for pzn
            /// </summary>
            [EnumMember(Value = "pzn")]
            PznEnum = 63,
            
            /// <summary>
            /// Enum QrcodeEnum for qrcode
            /// </summary>
            [EnumMember(Value = "qrcode")]
            QrcodeEnum = 64,
            
            /// <summary>
            /// Enum Rm4sccEnum for rm4scc
            /// </summary>
            [EnumMember(Value = "rm4scc")]
            Rm4sccEnum = 65,
            
            /// <summary>
            /// Enum Rss14Enum for rss14
            /// </summary>
            [EnumMember(Value = "rss14")]
            Rss14Enum = 66,
            
            /// <summary>
            /// Enum Rss14stackEnum for rss14stack
            /// </summary>
            [EnumMember(Value = "rss14stack")]
            Rss14stackEnum = 67,
            
            /// <summary>
            /// Enum Rss14stackOmniEnum for rss14stack_omni
            /// </summary>
            [EnumMember(Value = "rss14stack_omni")]
            Rss14stackOmniEnum = 68,
            
            /// <summary>
            /// Enum RssExpEnum for rss_exp
            /// </summary>
            [EnumMember(Value = "rss_exp")]
            RssExpEnum = 69,
            
            /// <summary>
            /// Enum RssExpstackEnum for rss_expstack
            /// </summary>
            [EnumMember(Value = "rss_expstack")]
            RssExpstackEnum = 70,
            
            /// <summary>
            /// Enum RssLtdEnum for rss_ltd
            /// </summary>
            [EnumMember(Value = "rss_ltd")]
            RssLtdEnum = 71,
            
            /// <summary>
            /// Enum TelepenEnum for telepen
            /// </summary>
            [EnumMember(Value = "telepen")]
            TelepenEnum = 72,
            
            /// <summary>
            /// Enum TelepenNumEnum for telepen_num
            /// </summary>
            [EnumMember(Value = "telepen_num")]
            TelepenNumEnum = 73,
            
            /// <summary>
            /// Enum UpcaEnum for upca
            /// </summary>
            [EnumMember(Value = "upca")]
            UpcaEnum = 74,
            
            /// <summary>
            /// Enum UpcaChkEnum for upca_chk
            /// </summary>
            [EnumMember(Value = "upca_chk")]
            UpcaChkEnum = 75,
            
            /// <summary>
            /// Enum UpceEnum for upce
            /// </summary>
            [EnumMember(Value = "upce")]
            UpceEnum = 76,
            
            /// <summary>
            /// Enum UpceChkEnum for upce_chk
            /// </summary>
            [EnumMember(Value = "upce_chk")]
            UpceChkEnum = 77,
            
            /// <summary>
            /// Enum VinEnum for vin
            /// </summary>
            [EnumMember(Value = "vin")]
            VinEnum = 78
        }

        /// <summary>
        /// Тип штрихкода
        /// </summary>
        /// <value>Тип штрихкода</value>
        /// <example>ean13</example>
        [Required]
        [DataMember(Name="type", EmitDefaultValue=true)]
        public TypeEnum Type { get; set; }


        /// <summary>
        /// Алгоритм кодирования веса в штрихкоде
        /// </summary>
        /// <value>Алгоритм кодирования веса в штрихкоде</value>
        [TypeConverter(typeof(CustomEnumConverter<WeightEncodingEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum WeightEncodingEnum
        {
            
            /// <summary>
            /// Enum NoneEnum for none
            /// </summary>
            [EnumMember(Value = "none")]
            NoneEnum = 1,
            
            /// <summary>
            /// Enum Ean13TailGram4Enum for ean13-tail-gram-4
            /// </summary>
            [EnumMember(Value = "ean13-tail-gram-4")]
            Ean13TailGram4Enum = 2,
            
            /// <summary>
            /// Enum Ean13TailGram5Enum for ean13-tail-gram-5
            /// </summary>
            [EnumMember(Value = "ean13-tail-gram-5")]
            Ean13TailGram5Enum = 3
        }

        /// <summary>
        /// Алгоритм кодирования веса в штрихкоде
        /// </summary>
        /// <value>Алгоритм кодирования веса в штрихкоде</value>
        /// <example>ean13-tail-gram-4</example>
        [Required]
        [DataMember(Name="weightEncoding", EmitDefaultValue=true)]
        public WeightEncodingEnum WeightEncoding { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NomenclatureItemsInnerBarcode {\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  Values: ").Append(Values).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  WeightEncoding: ").Append(WeightEncoding).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((NomenclatureItemsInnerBarcode)obj);
        }

        /// <summary>
        /// Returns true if NomenclatureItemsInnerBarcode instances are equal
        /// </summary>
        /// <param name="other">Instance of NomenclatureItemsInnerBarcode to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NomenclatureItemsInnerBarcode other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Value == other.Value ||
                    Value != null &&
                    Value.Equals(other.Value)
                ) && 
                (
                    Values == other.Values ||
                    Values != null &&
                    other.Values != null &&
                    Values.SequenceEqual(other.Values)
                ) && 
                (
                    Type == other.Type ||
                    
                    Type.Equals(other.Type)
                ) && 
                (
                    WeightEncoding == other.WeightEncoding ||
                    
                    WeightEncoding.Equals(other.WeightEncoding)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Value != null)
                    hashCode = hashCode * 59 + Value.GetHashCode();
                    if (Values != null)
                    hashCode = hashCode * 59 + Values.GetHashCode();
                    
                    hashCode = hashCode * 59 + Type.GetHashCode();
                    
                    hashCode = hashCode * 59 + WeightEncoding.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(NomenclatureItemsInnerBarcode left, NomenclatureItemsInnerBarcode right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(NomenclatureItemsInnerBarcode left, NomenclatureItemsInnerBarcode right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
