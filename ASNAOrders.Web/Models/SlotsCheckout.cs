/*
 * API для интеграции сервиса Яндекс.Еда
 *
 * Описание API для работы с сервисом Яндекс.Еда по моделям \"Доставка Яндекс Едой\",  \"Доставка партнером\" и \"Самовывоз\". Все методы описанные ниже должны быть реализованы на стороне партнера в процессе интеграции. Т.е. сервис Яндекс.Еда выступает в роли клиента, а Вам необходимо реализовать серверную часть. Взаимодействие происходит на основании pull-модели, т.е. сервис Яндекс Еда как клиент запрашивает данные либо может создавать/обновлять данные если это необходимо.  # Authentication  <!- - ReDoc-Inject: <security-definitions> - ->
 *
 * The version of the OpenAPI document: 1.0-oas3
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using ASNAOrders.Web.Converters;

namespace ASNAOrders.Web.Models
{ 
    /// <summary>
    /// Слоты для использования в Корзине при оформлении заказа
    /// </summary>
    [DataContract]
    public partial class SlotsCheckout : IEquatable<SlotsCheckout>
    {
        /// <summary>
        /// Gets or Sets DeliveryAddress
        /// </summary>
        [Required]
        [DataMember(Name="delivery_address", EmitDefaultValue=false)]
        public NearestSlotsDeliveryAddress DeliveryAddress { get; set; }

        /// <summary>
        /// Список товаров из собранного заказа (в случае, если работа слотов доставки зависит от товаров в заказе)
        /// </summary>
        /// <value>Список товаров из собранного заказа (в случае, если работа слотов доставки зависит от товаров в заказе)</value>
        [DataMember(Name="items", EmitDefaultValue=false)]
        public List<SlotsCheckoutItemsInner> Items { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SlotsCheckout {\n");
            sb.Append("  DeliveryAddress: ").Append(DeliveryAddress).Append("\n");
            sb.Append("  Items: ").Append(Items).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((SlotsCheckout)obj);
        }

        /// <summary>
        /// Returns true if SlotsCheckout instances are equal
        /// </summary>
        /// <param name="other">Instance of SlotsCheckout to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SlotsCheckout other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    DeliveryAddress == other.DeliveryAddress ||
                    DeliveryAddress != null &&
                    DeliveryAddress.Equals(other.DeliveryAddress)
                ) && 
                (
                    Items == other.Items ||
                    Items != null &&
                    other.Items != null &&
                    Items.SequenceEqual(other.Items)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (DeliveryAddress != null)
                    hashCode = hashCode * 59 + DeliveryAddress.GetHashCode();
                    if (Items != null)
                    hashCode = hashCode * 59 + Items.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(SlotsCheckout left, SlotsCheckout right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(SlotsCheckout left, SlotsCheckout right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
