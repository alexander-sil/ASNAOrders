/*
 * API для интеграции сервиса Яндекс.Еда
 *
 * Описание API для работы с сервисом Яндекс.Еда по моделям \"Доставка Яндекс Едой\",  \"Доставка партнером\" и \"Самовывоз\". Все методы описанные ниже должны быть реализованы на стороне партнера в процессе интеграции. Т.е. сервис Яндекс.Еда выступает в роли клиента, а Вам необходимо реализовать серверную часть. Взаимодействие происходит на основании pull-модели, т.е. сервис Яндекс Еда как клиент запрашивает данные либо может создавать/обновлять данные если это необходимо.  # Authentication  <!- - ReDoc-Inject: <security-definitions> - ->
 *
 * The version of the OpenAPI document: 1.0-oas3
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using ASNAOrders.Web.Converters;

namespace ASNAOrders.Web.Models
{ 
    /// <summary>
    /// Информация о доставке
    /// </summary>
    [DataContract]
    public partial class PickupOrderV1DeliveryInfo : IEquatable<PickupOrderV1DeliveryInfo>
    {
        /// <summary>
        /// Имя клиента в сервисе Яндекс Еда
        /// </summary>
        /// <value>Имя клиента в сервисе Яндекс Еда</value>
        /// <example>Иванов Иван Иванович</example>
        [Required]
        [DataMember(Name="clientName", EmitDefaultValue=false)]
        public string ClientName { get; set; }

        /// <summary>
        /// Номер телефона для связи с клиентом в международном формате. Состоит из частей \&quot;+&lt;код страны&gt;&lt;номер&gt;\&quot;. Может содержать добавочный номер: \&quot;+&lt;код страны&gt;&lt;номер&gt; доб. &lt;добавочный номер&gt;\&quot;
        /// </summary>
        /// <value>Номер телефона для связи с клиентом в международном формате. Состоит из частей \&quot;+&lt;код страны&gt;&lt;номер&gt;\&quot;. Может содержать добавочный номер: \&quot;+&lt;код страны&gt;&lt;номер&gt; доб. &lt;добавочный номер&gt;\&quot;</value>
        /// <example>+74732006745 доб. 12099</example>
        [Required]
        [DataMember(Name="phoneNumber", EmitDefaultValue=false)]
        public string PhoneNumber { get; set; }

        /// <summary>
        /// Дата, когда придет клиент в магазин, в формате RFC3339 с дробной частью секунд (Y-m-d\\TH:i:s.uP)
        /// </summary>
        /// <value>Дата, когда придет клиент в магазин, в формате RFC3339 с дробной частью секунд (Y-m-d\\TH:i:s.uP)</value>
        /// <example>1970-01-01T00:00:27.870+00:20</example>
        [Required]
        [DataMember(Name="clientArrivementDate", EmitDefaultValue=false)]
        public DateTime ClientArrivementDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PickupOrderV1DeliveryInfo {\n");
            sb.Append("  ClientName: ").Append(ClientName).Append("\n");
            sb.Append("  PhoneNumber: ").Append(PhoneNumber).Append("\n");
            sb.Append("  ClientArrivementDate: ").Append(ClientArrivementDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((PickupOrderV1DeliveryInfo)obj);
        }

        /// <summary>
        /// Returns true if PickupOrderV1DeliveryInfo instances are equal
        /// </summary>
        /// <param name="other">Instance of PickupOrderV1DeliveryInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PickupOrderV1DeliveryInfo other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ClientName == other.ClientName ||
                    ClientName != null &&
                    ClientName.Equals(other.ClientName)
                ) && 
                (
                    PhoneNumber == other.PhoneNumber ||
                    PhoneNumber != null &&
                    PhoneNumber.Equals(other.PhoneNumber)
                ) && 
                (
                    ClientArrivementDate == other.ClientArrivementDate ||
                    ClientArrivementDate != null &&
                    ClientArrivementDate.Equals(other.ClientArrivementDate)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (ClientName != null)
                    hashCode = hashCode * 59 + ClientName.GetHashCode();
                    if (PhoneNumber != null)
                    hashCode = hashCode * 59 + PhoneNumber.GetHashCode();
                    if (ClientArrivementDate != null)
                    hashCode = hashCode * 59 + ClientArrivementDate.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(PickupOrderV1DeliveryInfo left, PickupOrderV1DeliveryInfo right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(PickupOrderV1DeliveryInfo left, PickupOrderV1DeliveryInfo right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
