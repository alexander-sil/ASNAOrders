/*
 * API для интеграции сервиса Яндекс.Еда
 *
 * Описание API для работы с сервисом Яндекс.Еда по моделям \"Доставка Яндекс Едой\",  \"Доставка партнером\" и \"Самовывоз\". Все методы описанные ниже должны быть реализованы на стороне партнера в процессе интеграции. Т.е. сервис Яндекс.Еда выступает в роли клиента, а Вам необходимо реализовать серверную часть. Взаимодействие происходит на основании pull-модели, т.е. сервис Яндекс Еда как клиент запрашивает данные либо может создавать/обновлять данные если это необходимо.  # Authentication  <!- - ReDoc-Inject: <security-definitions> - ->
 *
 * The version of the OpenAPI document: 1.0-oas3
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using ASNAOrders.Web.Converters;

namespace ASNAOrders.Web.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class NearestSlotsResponseInnerNearestTimesInner : IEquatable<NearestSlotsResponseInnerNearestTimesInner>
    {
        /// <summary>
        /// Идентификатор слота
        /// </summary>
        /// <value>Идентификатор слота</value>
        /// <example>15902</example>
        [DataMember(Name="id", EmitDefaultValue=true)]
        public int Id { get; set; }

        /// <summary>
        /// Время старта слота, по времени магазина в UTC (nearest time in RFC3339, example: \&quot;2022-05-18T15:35:27.000000+03:00\&quot;)
        /// </summary>
        /// <value>Время старта слота, по времени магазина в UTC (nearest time in RFC3339, example: \&quot;2022-05-18T15:35:27.000000+03:00\&quot;)</value>
        /// <example>2022-05-18T15:35:27.000000+03:00</example>
        [Required]
        [DataMember(Name="start_time", EmitDefaultValue=false)]
        public string StartTime { get; set; }

        /// <summary>
        /// Время окончания слота, по времени магазина в UTC (nearest time in RFC3339, example: \&quot;2022-05-18T16:05:27.000000+03:00\&quot;)
        /// </summary>
        /// <value>Время окончания слота, по времени магазина в UTC (nearest time in RFC3339, example: \&quot;2022-05-18T16:05:27.000000+03:00\&quot;)</value>
        /// <example>2022-05-18T16:05:27.000000+03:00</example>
        [Required]
        [DataMember(Name="end_time", EmitDefaultValue=false)]
        public string EndTime { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NearestSlotsResponseInnerNearestTimesInner {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  StartTime: ").Append(StartTime).Append("\n");
            sb.Append("  EndTime: ").Append(EndTime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((NearestSlotsResponseInnerNearestTimesInner)obj);
        }

        /// <summary>
        /// Returns true if NearestSlotsResponseInnerNearestTimesInner instances are equal
        /// </summary>
        /// <param name="other">Instance of NearestSlotsResponseInnerNearestTimesInner to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NearestSlotsResponseInnerNearestTimesInner other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    
                    Id.Equals(other.Id)
                ) && 
                (
                    StartTime == other.StartTime ||
                    StartTime != null &&
                    StartTime.Equals(other.StartTime)
                ) && 
                (
                    EndTime == other.EndTime ||
                    EndTime != null &&
                    EndTime.Equals(other.EndTime)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (StartTime != null)
                    hashCode = hashCode * 59 + StartTime.GetHashCode();
                    if (EndTime != null)
                    hashCode = hashCode * 59 + EndTime.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(NearestSlotsResponseInnerNearestTimesInner left, NearestSlotsResponseInnerNearestTimesInner right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(NearestSlotsResponseInnerNearestTimesInner left, NearestSlotsResponseInnerNearestTimesInner right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
