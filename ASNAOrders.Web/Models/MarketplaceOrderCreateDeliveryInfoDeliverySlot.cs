/*
 * API для интеграции сервиса Яндекс.Еда
 *
 * Описание API для работы с сервисом Яндекс.Еда по моделям \"Доставка Яндекс Едой\",  \"Доставка партнером\" и \"Самовывоз\". Все методы описанные ниже должны быть реализованы на стороне партнера в процессе интеграции. Т.е. сервис Яндекс.Еда выступает в роли клиента, а Вам необходимо реализовать серверную часть. Взаимодействие происходит на основании pull-модели, т.е. сервис Яндекс Еда как клиент запрашивает данные либо может создавать/обновлять данные если это необходимо.  # Authentication  <!- - ReDoc-Inject: <security-definitions> - ->
 *
 * The version of the OpenAPI document: 1.0-oas3
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using ASNAOrders.Web.Converters;

namespace ASNAOrders.Web.Models
{
    /// <summary>
    /// Информация о слоте доставки
    /// </summary>
    [DataContract]
    public partial class MarketplaceOrderCreateDeliveryInfoDeliverySlot : IEquatable<MarketplaceOrderCreateDeliveryInfoDeliverySlot>
    {
        /// <summary>
        /// Id слота
        /// </summary>
        /// <value>Id слота</value>
        [DataMember(Name = "slot_id", EmitDefaultValue = false)]
        public string SlotId { get; set; }

        /// <summary>
        /// Начало слота доставки
        /// </summary>
        /// <value>Начало слота доставки</value>
        /// <example>1970-01-01T00:00:27.870+00:20</example>
        [Required]
        [DataMember(Name = "from", EmitDefaultValue = false)]
        public DateTime From { get; set; }

        /// <summary>
        /// Конец слота доставки
        /// </summary>
        /// <value>Конец слота доставки</value>
        /// <example>1970-01-01T00:00:27.870+00:20</example>
        [Required]
        [DataMember(Name = "to", EmitDefaultValue = false)]
        public DateTime To { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MarketplaceOrderCreateDeliveryInfoDeliverySlot {\n");
            sb.Append("  SlotId: ").Append(SlotId).Append("\n");
            sb.Append("  From: ").Append(From).Append("\n");
            sb.Append("  To: ").Append(To).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((MarketplaceOrderCreateDeliveryInfoDeliverySlot)obj);
        }

        /// <summary>
        /// Returns true if MarketplaceOrderCreateDeliveryInfoDeliverySlot instances are equal
        /// </summary>
        /// <param name="other">Instance of MarketplaceOrderCreateDeliveryInfoDeliverySlot to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MarketplaceOrderCreateDeliveryInfoDeliverySlot other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return
                (
                    SlotId == other.SlotId ||
                    SlotId != null &&
                    SlotId.Equals(other.SlotId)
                ) &&
                (
                    From == other.From ||
                    From != null &&
                    From.Equals(other.From)
                ) &&
                (
                    To == other.To ||
                    To != null &&
                    To.Equals(other.To)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                if (SlotId != null)
                    hashCode = hashCode * 59 + SlotId.GetHashCode();
                if (From != null)
                    hashCode = hashCode * 59 + From.GetHashCode();
                if (To != null)
                    hashCode = hashCode * 59 + To.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
#pragma warning disable 1591

        public static bool operator ==(MarketplaceOrderCreateDeliveryInfoDeliverySlot left, MarketplaceOrderCreateDeliveryInfoDeliverySlot right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(MarketplaceOrderCreateDeliveryInfoDeliverySlot left, MarketplaceOrderCreateDeliveryInfoDeliverySlot right)
        {
            return !Equals(left, right);
        }

#pragma warning restore 1591
        #endregion Operators
    }
}
