/*
 * API для интеграции сервиса Яндекс.Еда
 *
 * Описание API для работы с сервисом Яндекс.Еда по моделям \"Доставка Яндекс Едой\",  \"Доставка партнером\" и \"Самовывоз\". Все методы описанные ниже должны быть реализованы на стороне партнера в процессе интеграции. Т.е. сервис Яндекс.Еда выступает в роли клиента, а Вам необходимо реализовать серверную часть. Взаимодействие происходит на основании pull-модели, т.е. сервис Яндекс Еда как клиент запрашивает данные либо может создавать/обновлять данные если это необходимо.  # Authentication  <!- - ReDoc-Inject: <security-definitions> - ->
 *
 * The version of the OpenAPI document: 1.0-oas3
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using ASNAOrders.Web.Converters;

namespace ASNAOrders.Web.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class NomenclatureItemsInner : IEquatable<NomenclatureItemsInner>
    {
        /// <summary>
        /// Внутренний уникальный идентификатор товара в системе партнера
        /// </summary>
        /// <value>Внутренний уникальный идентификатор товара в системе партнера</value>
        /// <example>some-uniq-identifier</example>
        [Required]
        [MaxLength(64)]
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Артикул товара в системе партнера
        /// </summary>
        /// <value>Артикул товара в системе партнера</value>
        [Required]
        [DataMember(Name="vendorCode", EmitDefaultValue=false)]
        public string VendorCode { get; set; }

        /// <summary>
        /// Внутренний уникальный идентификатор категории в системе партнера из блока #/categories
        /// </summary>
        /// <value>Внутренний уникальный идентификатор категории в системе партнера из блока #/categories</value>
        /// <example>some-uniq-identifier</example>
        [Required]
        [MaxLength(64)]
        [DataMember(Name="categoryId", EmitDefaultValue=false)]
        public string CategoryId { get; set; }

        /// <summary>
        /// Расположение товара в маганизе. Можно не передавать.
        /// </summary>
        /// <value>Расположение товара в маганизе. Можно не передавать.</value>
        /// <example>Бакалея. Линия 8</example>
        [DataMember(Name="location", EmitDefaultValue=false)]
        public string Location { get; set; }

        /// <summary>
        /// Наименование товара
        /// </summary>
        /// <value>Наименование товара</value>
        /// <example>Молоко Домик в деревне</example>
        [Required]
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [Required]
        [DataMember(Name="description", EmitDefaultValue=false)]
        public NomenclatureItemsInnerDescription Description { get; set; }

        /// <summary>
        /// Цена товара. Товары с нулевой ценой не обрабатываются
        /// </summary>
        /// <value>Цена товара. Товары с нулевой ценой не обрабатываются</value>
        /// <example>189</example>
        [Required]
        [DataMember(Name="price", EmitDefaultValue=true)]
        public float Price { get; set; }

        /// <summary>
        /// Старая цена товара. Используется для отображения скидок на товары. Если не передано - будет использован null в качестве значения
        /// </summary>
        /// <value>Старая цена товара. Используется для отображения скидок на товары. Если не передано - будет использован null в качестве значения</value>
        /// <example>239</example>
        [DataMember(Name="oldPrice", EmitDefaultValue=true)]
        public float? OldPrice { get; set; }

        /// <summary>
        /// НДС, включенный в стоимость, в процентах. По-умолчанию, значение соответствует настройке конкретной торговой точки в системе Яндекс Еды
        /// </summary>
        /// <value>НДС, включенный в стоимость, в процентах. По-умолчанию, значение соответствует настройке конкретной торговой точки в системе Яндекс Еды</value>
        /// <example>20</example>
        [DataMember(Name="vat", EmitDefaultValue=true)]
        public int Vat { get; set; }

        /// <summary>
        /// Gets or Sets Barcode
        /// </summary>
        [Required]
        [DataMember(Name="barcode", EmitDefaultValue=false)]
        public NomenclatureItemsInnerBarcode Barcode { get; set; }

        /// <summary>
        /// Gets or Sets Measure
        /// </summary>
        [Required]
        [DataMember(Name="measure", EmitDefaultValue=false)]
        public NomenclatureItemsInnerMeasure Measure { get; set; }

        /// <summary>
        /// Gets or Sets Volume
        /// </summary>
        [DataMember(Name="volume", EmitDefaultValue=false)]
        public NomenclatureItemsInnerVolume Volume { get; set; }

        /// <summary>
        /// Параметр указывающий весовой товар или нет. Для весовых true
        /// </summary>
        /// <value>Параметр указывающий весовой товар или нет. Для весовых true</value>
        /// <example>false</example>
        [Required]
        [DataMember(Name="isCatchWeight", EmitDefaultValue=true)]
        public bool IsCatchWeight { get; set; }

        /// <summary>
        /// Тип акциза. Пример, ССН (кириллица - сахаросодержащие напитки)
        /// </summary>
        /// <value>Тип акциза. Пример, ССН (кириллица - сахаросодержащие напитки)</value>
        /// <example>ССН</example>
        [DataMember(Name="exciseValue", EmitDefaultValue=false)]
        public string ExciseValue { get; set; }

        /// <summary>
        /// Порядок сортировки от меньшего к большему
        /// </summary>
        /// <value>Порядок сортировки от меньшего к большему</value>
        /// <example>0</example>
        [DataMember(Name="sortOrder", EmitDefaultValue=true)]
        public int SortOrder { get; set; }

        /// <summary>
        /// Изображение товара
        /// </summary>
        /// <value>Изображение товара</value>
        [Required]
        [DataMember(Name="images", EmitDefaultValue=false)]
        public List<NomenclatureItemsInnerImagesInner> Images { get; set; }

        /// <summary>
        /// Список особых признаков товара. Например: Маркированный, Для взрослых, Алкоголь, СТМ, Рецептурный и другие.
        /// </summary>
        /// <value>Список особых признаков товара. Например: Маркированный, Для взрослых, Алкоголь, СТМ, Рецептурный и другие.</value>
        [DataMember(Name="labels", EmitDefaultValue=false)]
        public List<string> Labels { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NomenclatureItemsInner {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  VendorCode: ").Append(VendorCode).Append("\n");
            sb.Append("  CategoryId: ").Append(CategoryId).Append("\n");
            sb.Append("  Location: ").Append(Location).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  OldPrice: ").Append(OldPrice).Append("\n");
            sb.Append("  Vat: ").Append(Vat).Append("\n");
            sb.Append("  Barcode: ").Append(Barcode).Append("\n");
            sb.Append("  Measure: ").Append(Measure).Append("\n");
            sb.Append("  Volume: ").Append(Volume).Append("\n");
            sb.Append("  IsCatchWeight: ").Append(IsCatchWeight).Append("\n");
            sb.Append("  ExciseValue: ").Append(ExciseValue).Append("\n");
            sb.Append("  SortOrder: ").Append(SortOrder).Append("\n");
            sb.Append("  Images: ").Append(Images).Append("\n");
            sb.Append("  Labels: ").Append(Labels).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((NomenclatureItemsInner)obj);
        }

        /// <summary>
        /// Returns true if NomenclatureItemsInner instances are equal
        /// </summary>
        /// <param name="other">Instance of NomenclatureItemsInner to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NomenclatureItemsInner other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    VendorCode == other.VendorCode ||
                    VendorCode != null &&
                    VendorCode.Equals(other.VendorCode)
                ) && 
                (
                    CategoryId == other.CategoryId ||
                    CategoryId != null &&
                    CategoryId.Equals(other.CategoryId)
                ) && 
                (
                    Location == other.Location ||
                    Location != null &&
                    Location.Equals(other.Location)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) && 
                (
                    Price == other.Price ||
                    
                    Price.Equals(other.Price)
                ) && 
                (
                    OldPrice == other.OldPrice ||
                    OldPrice != null &&
                    OldPrice.Equals(other.OldPrice)
                ) && 
                (
                    Vat == other.Vat ||
                    
                    Vat.Equals(other.Vat)
                ) && 
                (
                    Barcode == other.Barcode ||
                    Barcode != null &&
                    Barcode.Equals(other.Barcode)
                ) && 
                (
                    Measure == other.Measure ||
                    Measure != null &&
                    Measure.Equals(other.Measure)
                ) && 
                (
                    Volume == other.Volume ||
                    Volume != null &&
                    Volume.Equals(other.Volume)
                ) && 
                (
                    IsCatchWeight == other.IsCatchWeight ||
                    
                    IsCatchWeight.Equals(other.IsCatchWeight)
                ) && 
                (
                    ExciseValue == other.ExciseValue ||
                    ExciseValue != null &&
                    ExciseValue.Equals(other.ExciseValue)
                ) && 
                (
                    SortOrder == other.SortOrder ||
                    
                    SortOrder.Equals(other.SortOrder)
                ) && 
                (
                    Images == other.Images ||
                    Images != null &&
                    other.Images != null &&
                    Images.SequenceEqual(other.Images)
                ) && 
                (
                    Labels == other.Labels ||
                    Labels != null &&
                    other.Labels != null &&
                    Labels.SequenceEqual(other.Labels)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (VendorCode != null)
                    hashCode = hashCode * 59 + VendorCode.GetHashCode();
                    if (CategoryId != null)
                    hashCode = hashCode * 59 + CategoryId.GetHashCode();
                    if (Location != null)
                    hashCode = hashCode * 59 + Location.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    
                    hashCode = hashCode * 59 + Price.GetHashCode();
                    if (OldPrice != null)
                    hashCode = hashCode * 59 + OldPrice.GetHashCode();
                    
                    hashCode = hashCode * 59 + Vat.GetHashCode();
                    if (Barcode != null)
                    hashCode = hashCode * 59 + Barcode.GetHashCode();
                    if (Measure != null)
                    hashCode = hashCode * 59 + Measure.GetHashCode();
                    if (Volume != null)
                    hashCode = hashCode * 59 + Volume.GetHashCode();
                    
                    hashCode = hashCode * 59 + IsCatchWeight.GetHashCode();
                    if (ExciseValue != null)
                    hashCode = hashCode * 59 + ExciseValue.GetHashCode();
                    
                    hashCode = hashCode * 59 + SortOrder.GetHashCode();
                    if (Images != null)
                    hashCode = hashCode * 59 + Images.GetHashCode();
                    if (Labels != null)
                    hashCode = hashCode * 59 + Labels.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(NomenclatureItemsInner left, NomenclatureItemsInner right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(NomenclatureItemsInner left, NomenclatureItemsInner right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
