/*
 * API для интеграции сервиса Яндекс.Еда
 *
 * Описание API для работы с сервисом Яндекс.Еда по моделям \"Доставка Яндекс Едой\",  \"Доставка партнером\" и \"Самовывоз\". Все методы описанные ниже должны быть реализованы на стороне партнера в процессе интеграции. Т.е. сервис Яндекс.Еда выступает в роли клиента, а Вам необходимо реализовать серверную часть. Взаимодействие происходит на основании pull-модели, т.е. сервис Яндекс Еда как клиент запрашивает данные либо может создавать/обновлять данные если это необходимо.  # Authentication  <!- - ReDoc-Inject: <security-definitions> - ->
 *
 * The version of the OpenAPI document: 1.0-oas3
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using ASNAOrders.Web.Converters;

namespace ASNAOrders.Web.Models
{ 
    /// <summary>
    /// Описание товара
    /// </summary>
    [DataContract]
    public partial class NomenclatureItemsInnerDescription : IEquatable<NomenclatureItemsInnerDescription>
    {
        /// <summary>
        /// Общее описание товара
        /// </summary>
        /// <value>Общее описание товара</value>
        [DataMember(Name="general", EmitDefaultValue=false)]
        public string General { get; set; }

        /// <summary>
        /// Сведения о составе
        /// </summary>
        /// <value>Сведения о составе</value>
        /// <example>молоко нормализованное (молоко цельное, молоко обезжиренное)</example>
        [DataMember(Name="composition", EmitDefaultValue=false)]
        public string Composition { get; set; }

        /// <summary>
        /// Пищевая ценность
        /// </summary>
        /// <value>Пищевая ценность</value>
        /// <example>600 ккал, 8 белки, 3,2 жиры, 40 углеводы</example>
        [DataMember(Name="nutritionalValue", EmitDefaultValue=false)]
        public string NutritionalValue { get; set; }

        /// <summary>
        /// Назначение
        /// </summary>
        /// <value>Назначение</value>
        [DataMember(Name="purpose", EmitDefaultValue=false)]
        public string Purpose { get; set; }

        /// <summary>
        /// Условия хранения
        /// </summary>
        /// <value>Условия хранения</value>
        /// <example>от -5 до 5 градусов</example>
        [DataMember(Name="storageRequirements", EmitDefaultValue=false)]
        public string StorageRequirements { get; set; }

        /// <summary>
        /// Срок годности в днях
        /// </summary>
        /// <value>Срок годности в днях</value>
        /// <example>60</example>
        [DataMember(Name="expiresIn", EmitDefaultValue=false)]
        public string ExpiresIn { get; set; }

        /// <summary>
        /// Страна изготовления
        /// </summary>
        /// <value>Страна изготовления</value>
        /// <example>Россия</example>
        [DataMember(Name="vendorCountry", EmitDefaultValue=false)]
        public string VendorCountry { get; set; }

        /// <summary>
        /// Сведения об упаковке
        /// </summary>
        /// <value>Сведения об упаковке</value>
        /// <example>Тетрапак</example>
        [DataMember(Name="packageInfo", EmitDefaultValue=false)]
        public string PackageInfo { get; set; }

        /// <summary>
        /// Производитель
        /// </summary>
        /// <value>Производитель</value>
        /// <example>ООО Молочный завод</example>
        [DataMember(Name="vendorName", EmitDefaultValue=false)]
        public string VendorName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NomenclatureItemsInnerDescription {\n");
            sb.Append("  General: ").Append(General).Append("\n");
            sb.Append("  Composition: ").Append(Composition).Append("\n");
            sb.Append("  NutritionalValue: ").Append(NutritionalValue).Append("\n");
            sb.Append("  Purpose: ").Append(Purpose).Append("\n");
            sb.Append("  StorageRequirements: ").Append(StorageRequirements).Append("\n");
            sb.Append("  ExpiresIn: ").Append(ExpiresIn).Append("\n");
            sb.Append("  VendorCountry: ").Append(VendorCountry).Append("\n");
            sb.Append("  PackageInfo: ").Append(PackageInfo).Append("\n");
            sb.Append("  VendorName: ").Append(VendorName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((NomenclatureItemsInnerDescription)obj);
        }

        /// <summary>
        /// Returns true if NomenclatureItemsInnerDescription instances are equal
        /// </summary>
        /// <param name="other">Instance of NomenclatureItemsInnerDescription to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NomenclatureItemsInnerDescription other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    General == other.General ||
                    General != null &&
                    General.Equals(other.General)
                ) && 
                (
                    Composition == other.Composition ||
                    Composition != null &&
                    Composition.Equals(other.Composition)
                ) && 
                (
                    NutritionalValue == other.NutritionalValue ||
                    NutritionalValue != null &&
                    NutritionalValue.Equals(other.NutritionalValue)
                ) && 
                (
                    Purpose == other.Purpose ||
                    Purpose != null &&
                    Purpose.Equals(other.Purpose)
                ) && 
                (
                    StorageRequirements == other.StorageRequirements ||
                    StorageRequirements != null &&
                    StorageRequirements.Equals(other.StorageRequirements)
                ) && 
                (
                    ExpiresIn == other.ExpiresIn ||
                    ExpiresIn != null &&
                    ExpiresIn.Equals(other.ExpiresIn)
                ) && 
                (
                    VendorCountry == other.VendorCountry ||
                    VendorCountry != null &&
                    VendorCountry.Equals(other.VendorCountry)
                ) && 
                (
                    PackageInfo == other.PackageInfo ||
                    PackageInfo != null &&
                    PackageInfo.Equals(other.PackageInfo)
                ) && 
                (
                    VendorName == other.VendorName ||
                    VendorName != null &&
                    VendorName.Equals(other.VendorName)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (General != null)
                    hashCode = hashCode * 59 + General.GetHashCode();
                    if (Composition != null)
                    hashCode = hashCode * 59 + Composition.GetHashCode();
                    if (NutritionalValue != null)
                    hashCode = hashCode * 59 + NutritionalValue.GetHashCode();
                    if (Purpose != null)
                    hashCode = hashCode * 59 + Purpose.GetHashCode();
                    if (StorageRequirements != null)
                    hashCode = hashCode * 59 + StorageRequirements.GetHashCode();
                    if (ExpiresIn != null)
                    hashCode = hashCode * 59 + ExpiresIn.GetHashCode();
                    if (VendorCountry != null)
                    hashCode = hashCode * 59 + VendorCountry.GetHashCode();
                    if (PackageInfo != null)
                    hashCode = hashCode * 59 + PackageInfo.GetHashCode();
                    if (VendorName != null)
                    hashCode = hashCode * 59 + VendorName.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(NomenclatureItemsInnerDescription left, NomenclatureItemsInnerDescription right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(NomenclatureItemsInnerDescription left, NomenclatureItemsInnerDescription right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
