/*
 * API для интеграции сервиса Яндекс.Еда
 *
 * Описание API для работы с сервисом Яндекс.Еда по моделям \"Доставка Яндекс Едой\",  \"Доставка партнером\" и \"Самовывоз\". Все методы описанные ниже должны быть реализованы на стороне партнера в процессе интеграции. Т.е. сервис Яндекс.Еда выступает в роли клиента, а Вам необходимо реализовать серверную часть. Взаимодействие происходит на основании pull-модели, т.е. сервис Яндекс Еда как клиент запрашивает данные либо может создавать/обновлять данные если это необходимо.  # Authentication  <!- - ReDoc-Inject: <security-definitions> - ->
 *
 * The version of the OpenAPI document: 1.0-oas3
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using ASNAOrders.Web.Attributes;
using ASNAOrders.Web.Models;
using ASNAOrders.Web.Filters;
using Microsoft.AspNetCore.Mvc.Filters;
using ASNAOrders.Web.Data;
using ASNAOrders.Web.Converters;

namespace ASNAOrders.Web.Controllers
{
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class OrdersApiController : ControllerBase
    {
        /// <summary>
        /// Конвертер типов 
        /// </summary>
        private EntityModelConverter Converter { get; set; }

        /// <summary>
        /// Конструктор контроллера
        /// </summary>
        public OrdersApiController(ASNAOrdersDbContext context, EntityModelConverter converter)
        {
            Converter = converter;
        }

        /// <summary>
        /// Создание заказа в системе партнера
        /// </summary>
        /// <remarks>YandexOrder - схема заказа при доставке курьерами Яндекс Еды. MarketplaceOrder - схема заказа при доставке силами курьеров партнера.  PickupOrder - схема заказа при самовывозе. Актуальная версия модели запроса - application/vnd.eats.order.v2+json</remarks>
        /// <param name="partnerOrderCreateRequest"></param>
        /// <response code="200">Заказ успешно создан в системе партнера</response>
        /// <response code="400">Ошибка в запросе, в ответе список ошибок</response>
        /// <response code="401">Не пройдена авторизация, в ответе список ошибок</response>
        /// <response code="500">Внутренние ошибки сервера, в ответе список ошибок</response>
        [HttpPost]
        [Authorize]
        [Route("/order")]
        [Consumes("application/vnd.eats.order.v2+json")]
        [ValidateModelState]
        [SwaggerOperation("PartnerOrderCreate")]
        [SwaggerResponse(statusCode: 200, type: typeof(PartnerOrderCreate200Response), description: "Заказ успешно создан в системе партнера", ContentTypes = ["application/json"])]
        [SwaggerResponse(statusCode: 400, type: typeof(List<ErrorListV1Inner>), description: "Ошибка в запросе, в ответе список ошибок", ContentTypes = ["application/vnd.eda.picker.errors.v1+json"])]
        [SwaggerResponse(statusCode: 401, type: typeof(List<ErrorListV1Inner>), description: "Не пройдена авторизация, в ответе список ошибок", ContentTypes = ["application/vnd.eda.picker.errors.v1+json"])]
        [SwaggerResponse(statusCode: 500, type: typeof(List<ErrorListV1Inner>), description: "Внутренние ошибки сервера, в ответе список ошибок", ContentTypes = ["application/vnd.eda.picker.errors.v1+json"])]
        public virtual IActionResult PartnerOrderCreate([FromBody] PartnerOrderCreateRequest partnerOrderCreateRequest)
        {
            try
            {
                return new ContentResult()
                {
                    ContentType = Properties.Resources.ApplicationJsonString,
                    Content = JsonConvert.SerializeObject(Converter.CreateOrder(partnerOrderCreateRequest)),
                    StatusCode = 200
                };  
            } catch (KeyNotFoundException)
            {
                return StatusCode(404);
            }
        }

        /// <summary>
        /// Получение актуальной информации о заказе в системе партнера
        /// </summary>
        /// <remarks>Не забудьте указать корректную версию content-type - application/vnd.eats.order.v2+json</remarks>
        /// <param name="orderId">Идентификатор заказа в системе партнера</param>
        /// <response code="200">Информация о заказе успешно передана</response>
        /// <response code="400">Bad request. Ошибка в параметрах, в ответе список ошибок валидации</response>
        /// <response code="401">Не пройдена авторизация - истек токен, либо не был передан в запросе</response>
        /// <response code="404">Заказ не найден в системе</response>
        /// <response code="500">Внутренние ошибки сервера</response>
        [HttpGet]
        [Authorize(Policy = "ClientCredsReadWrite")]
        [Route("/order/{orderId}")]
        [ValidateModelState]
        [SwaggerOperation("PartnerOrderGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(PartnerOrderGet200Response), description: "Информация о заказе успешно передана", ContentTypes = ["application/vnd.eats.order.v2+json"])]
        [SwaggerResponse(statusCode: 400, type: typeof(List<ErrorListInner>), description: "Bad request. Ошибка в параметрах, в ответе список ошибок валидации", ContentTypes = ["application/json"])]
        [SwaggerResponse(statusCode: 401, type: typeof(AuthorizationRequiredResponse), description: "Не пройдена авторизация - истек токен, либо не был передан в запросе", ContentTypes = ["application/json"])]
        [SwaggerResponse(statusCode: 404, type: typeof(List<ErrorListInner>), description: "Заказ не найден в системе", ContentTypes = ["application/json"])]
        [SwaggerResponse(statusCode: 500, type: typeof(List<ErrorListInner>), description: "Внутренние ошибки сервера", ContentTypes = ["application/json"])]
        public virtual IActionResult PartnerOrderGet([FromRoute(Name = "orderId")][Required] string orderId)
        {
            try
            {
                return new ContentResult()
                {
                    ContentType = Properties.Resources.ApplicationOrderString,
                    Content = JsonConvert.SerializeObject(Converter.GetOrderById(orderId)),
                    StatusCode = 200
                };
            }
            catch (KeyNotFoundException)
            {
                return StatusCode(404);
            }
        }

        /// <summary>
        /// Получение актуального статуса заказа в системе партнера
        /// </summary>
        /// <param name="orderId">Идентификатор заказа в системе партнера</param>
        /// <response code="200">Статус заказа успешно выдан</response>
        /// <response code="400">Bad request. Ошибка в параметрах, в ответе список ошибок валидации</response>
        /// <response code="401">Не пройдена авторизация - истек токен, либо не был передан в запросе</response>
        /// <response code="404">Заказ не найден в системе</response>
        /// <response code="500">Внутренние ошибки сервера</response>
        [HttpGet]
        [Authorize(Policy = "ClientCredsReadWrite")]
        [Route("/order/{orderId}/status")]
        [ValidateModelState]
        [SwaggerOperation("PartnerOrderStatus")]
        [SwaggerResponse(statusCode: 200, type: typeof(OrderStatus), description: "Статус заказа успешно выдан", ContentTypes = ["application/json"])]
        [SwaggerResponse(statusCode: 400, type: typeof(List<ErrorListInner>), description: "Bad request. Ошибка в параметрах, в ответе список ошибок валидации", ContentTypes = ["application/json"])]
        [SwaggerResponse(statusCode: 401, type: typeof(AuthorizationRequiredResponse), description: "Не пройдена авторизация - истек токен, либо не был передан в запросе", ContentTypes = ["application/json"])]
        [SwaggerResponse(statusCode: 404, type: typeof(List<ErrorListInner>), description: "Заказ не найден в системе", ContentTypes = ["application/json"])]
        [SwaggerResponse(statusCode: 500, type: typeof(List<ErrorListInner>), description: "Внутренние ошибки сервера", ContentTypes = ["application/json"])]
        public virtual IActionResult PartnerOrderStatus([FromRoute(Name = "orderId")][Required] string orderId)
        {
            return new ContentResult()
            {
                ContentType = Properties.Resources.ApplicationJsonString,
                Content = JsonConvert.SerializeObject(Converter.GetOrderStatusById(orderId))
            };
        }

        /// <summary>
        /// Обновление статуса заказа в системе партнера по инициативе Яндекс Еды. Для использования данного метода нужно согласовать это с сотрудниками Яндекса.
        /// </summary>
        /// <param name="orderId">Идентификатор заказа в системе партнера</param>
        /// <param name="orderStatus"></param>
        /// <response code="204">Статус заказа успешно обновлён</response>
        /// <response code="400">Bad request. Ошибка в параметрах, в ответе список ошибок валидации</response>
        /// <response code="401">Не пройдена авторизация - истек токен, либо не был передан в запросе</response>
        /// <response code="404">Заказ не найден в системе</response>
        /// <response code="500">Внутренние ошибки сервера</response>
        [HttpPut]
        [Authorize(Policy = "ClientCredsReadWrite")]
        [Route("/order/{orderId}/status")]
        [Consumes("application/vnd.eats.order.status.v1+json")]
        [ValidateModelState]
        [SwaggerOperation("PartnerOrderStatusPut")]
        [SwaggerResponse(statusCode: 400, type: typeof(List<ErrorListInner>), description: "Bad request. Ошибка в параметрах, в ответе список ошибок валидации", ContentTypes = ["application/json"])]
        [SwaggerResponse(statusCode: 401, type: typeof(AuthorizationRequiredResponse), description: "Не пройдена авторизация - истек токен, либо не был передан в запросе", ContentTypes = ["application/json"])]
        [SwaggerResponse(statusCode: 404, type: typeof(List<ErrorListInner>), description: "Заказ не найден в системе", ContentTypes = ["application/json"])]
        [SwaggerResponse(statusCode: 500, type: typeof(List<ErrorListInner>), description: "Внутренние ошибки сервера", ContentTypes = ["application/json"])]
        public virtual IActionResult PartnerOrderStatusPut([FromRoute(Name = "orderId")][Required] string orderId, [FromBody] OrderStatus orderStatus)
        {

            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(List<ErrorListInner>));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(AuthorizationRequiredResponse));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(List<ErrorListInner>));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(List<ErrorListInner>));

            throw new NotImplementedException();
        }
    }
}
