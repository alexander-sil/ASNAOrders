/*
 * API для интеграции сервиса Яндекс.Еда
 *
 * Описание API для работы с сервисом Яндекс.Еда по моделям \"Доставка Яндекс Едой\",  \"Доставка партнером\" и \"Самовывоз\". Все методы описанные ниже должны быть реализованы на стороне партнера в процессе интеграции. Т.е. сервис Яндекс.Еда выступает в роли клиента, а Вам необходимо реализовать серверную часть. Взаимодействие происходит на основании pull-модели, т.е. сервис Яндекс Еда как клиент запрашивает данные либо может создавать/обновлять данные если это необходимо.  # Authentication  <!- - ReDoc-Inject: <security-definitions> - ->
 *
 * The version of the OpenAPI document: 1.0-oas3
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using ASNAOrders.Web.Attributes;
using ASNAOrders.Web.Models;
using ASNAOrders.Web.Filters;
using ASNAOrders.Web.Data;
using ASNAOrders.Web.Converters;
using System.Net.Http.Json;
using Microsoft.Extensions.Logging;


namespace ASNAOrders.Web.Controllers
{
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class NomenclatureApiController : ControllerBase
    {
        /// <summary>
        /// Конвертер типов 
        /// </summary>
        private EntityModelConverter Converter { get; set; }

        private readonly ILogger<NomenclatureApiController> logger;

        /// <summary>
        /// Конструктор контроллера
        /// </summary>
        public NomenclatureApiController(ASNAOrdersDbContext context, EntityModelConverter converter, ILogger<NomenclatureApiController> logger)
        {
            this.logger = logger;
            Converter = converter;
        }

        /// <summary>
        /// Актуальная информация об остатках товаров
        /// </summary>
        /// <remarks>Перечисленным товарам обновляются остатки значением из поля stock. В зависимости от значения поля также обновляется и доступность товара. Если &lt;&#x3D;0 - товар становится недоступным для заказа, если &gt;0 - доступным для заказа. Отсутствующие в списке товары будут доступными для заказа с последним положительным количеством полученным от партнера. Чтобы отсутствующие в списке товары были недоступны для заказа - надо это согласовать с вашим менеджером Яндекса.</remarks>
        /// <param name="placeId">Уникальный идентификатор магазина в системе партнёра</param>
        /// <response code="200">Список товаров с актуальными остатками товаров. Чтобы отсутствующие в списке товары были недоступны для заказа - надо это согласовать с сотрудниками Яндекса. По умолчанию остатки не изменяются, если партнер не передал по ним новое значение.</response>
        /// <response code="400">Ошибка в запросе, в ответе список ошибок</response>
        /// <response code="401">Не пройдена авторизация, в ответе список ошибок</response>
        /// <response code="404">Не пройдена авторизация, в ответе список ошибок</response>
        /// <response code="500">Не пройдена авторизация, в ответе список ошибок</response>
        [HttpGet]
        [Authorize(Policy = "ClientCredsReadWrite")]
        [Route("/nomenclature/{placeId}/availability")]
        [ValidateModelState]
        [SwaggerOperation("PartnerNomenclatureAvailabilityGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(Availability), description: "Список товаров с актуальными остатками товаров. Чтобы отсутствующие в списке товары были недоступны для заказа - надо это согласовать с сотрудниками Яндекса. По умолчанию остатки не изменяются, если партнер не передал по ним новое значение.", ContentTypes = ["application/json"])]
        [SwaggerResponse(statusCode: 400, type: typeof(List<ErrorListV1Inner>), description: "Ошибка в запросе, в ответе список ошибок", ContentTypes = ["application/vnd.eda.picker.errors.v1+json"])]
        [SwaggerResponse(statusCode: 401, type: typeof(List<ErrorListV1Inner>), description: "Не пройдена авторизация, в ответе список ошибок", ContentTypes = ["application/vnd.eda.picker.errors.v1+json"])]
        [SwaggerResponse(statusCode: 404, type: typeof(List<ErrorListV1Inner>), description: "Не пройдена авторизация, в ответе список ошибок", ContentTypes = ["application/vnd.eda.picker.errors.v1+json"])]
        [SwaggerResponse(statusCode: 500, type: typeof(List<ErrorListV1Inner>), description: "Не пройдена авторизация, в ответе список ошибок", ContentTypes = ["application/vnd.eda.picker.errors.v1+json"])]
        public virtual IActionResult PartnerNomenclatureAvailabilityGet([FromRoute(Name = "placeId")][Required] string placeId)
        {
            if (string.IsNullOrWhiteSpace(placeId))
            {
                throw new BadHttpRequestException(Properties.Resources.ReqInvDataString, 400);
            }

            return new ContentResult()
            {
                ContentType = Properties.Resources.ApplicationJsonString,
                Content = JsonConvert.SerializeObject(Converter.GetAvailability(placeId)),
                StatusCode = 200
            };
        }

        /// <summary>
        /// Актуальная информация о товарах
        /// </summary>
        /// <param name="placeId">Уникальный идентификатор магазина в системе партнера</param>
        /// <response code="200">Актуальная номенклатура</response>
        /// <response code="400">Ошибка в запросе, в ответе список ошибок</response>
        /// <response code="401">Не пройдена авторизация, в ответе список ошибок</response>
        /// <response code="404">Не найден ресурс, в ответе список ошибок</response>
        /// <response code="500">Внутренние ошибки сервера, в ответе список ошибок</response>
        [HttpGet]
        [Authorize(Policy = "ClientCredsReadWrite")]
        [Route("/nomenclature/{placeId}/composition")]
        [ValidateModelState]
        [SwaggerOperation("PartnerNomenclatureCompositionGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(Nomenclature), description: "Актуальная номенклатура", ContentTypes = ["application/vnd.eda.picker.nomenclature.v1+json"])]
        [SwaggerResponse(statusCode: 400, type: typeof(List<ErrorListV1Inner>), description: "Ошибка в запросе, в ответе список ошибок", ContentTypes = ["application/vnd.eda.picker.errors.v1+json"])]
        [SwaggerResponse(statusCode: 401, type: typeof(List<ErrorListV1Inner>), description: "Не пройдена авторизация, в ответе список ошибок", ContentTypes = ["application/vnd.eda.picker.errors.v1+json"])]
        [SwaggerResponse(statusCode: 404, type: typeof(List<ErrorListV1Inner>), description: "Не найден ресурс, в ответе список ошибок", ContentTypes = ["application/vnd.eda.picker.errors.v1+json"])]
        [SwaggerResponse(statusCode: 500, type: typeof(List<ErrorListV1Inner>), description: "Внутренние ошибки сервера, в ответе список ошибок", ContentTypes = ["application/vnd.eda.picker.errors.v1+json"])]
        public virtual IActionResult PartnerNomenclatureCompositionGet([FromRoute(Name = "placeId")][Required] string placeId)
        {
            if (string.IsNullOrWhiteSpace(placeId))
            {
                return new StatusCodeResult(400);
            }

            return new ContentResult()
            {
                ContentType = Properties.Resources.ApplicationNomenclatureString,
                Content = JsonConvert.SerializeObject(Converter.GetComposition(placeId)),
                StatusCode = 200
            };
        }
    }
}
