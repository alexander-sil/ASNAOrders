/*
 * API для интеграции сервиса Яндекс.Еда
 *
 * Описание API для работы с сервисом Яндекс.Еда по моделям \"Доставка Яндекс Едой\",  \"Доставка партнером\" и \"Самовывоз\". Все методы описанные ниже должны быть реализованы на стороне партнера в процессе интеграции. Т.е. сервис Яндекс.Еда выступает в роли клиента, а Вам необходимо реализовать серверную часть. Взаимодействие происходит на основании pull-модели, т.е. сервис Яндекс Еда как клиент запрашивает данные либо может создавать/обновлять данные если это необходимо.  # Authentication  <!- - ReDoc-Inject: <security-definitions> - ->
 *
 * The version of the OpenAPI document: 1.0-oas3
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using ASNAOrders.Web.Attributes;
using ASNAOrders.Web.Models;
using ASNAOrders.Web.Filters;
using ASNAOrders.Web.Data;

namespace ASNAOrders.Web.Controllers
{
    /// <summary>
    /// 
    /// </summary>

    [ApiController]
    public class SlotsApiController : ControllerBase
    {
        /// <summary>
        /// Контекст БД контроллера слотов
        /// </summary>
        private ASNAOrdersDbContext Context { get; set; }

        /// <summary>
        /// Конструктор контроллера
        /// </summary>
        public SlotsApiController(ASNAOrdersDbContext context)
        {
            Context = context;
        }

        /// <summary>
        /// Слоты для использования на Главной для отображения ближайшего времени доставки
        /// </summary>
        /// <param name="nearestSlots"></param>
        /// <response code="200">Усредненные слоты</response>
        /// <response code="400">Ошибка в запросе, в ответе список ошибок</response>
        /// <response code="401">Не пройдена авторизация, в ответе список ошибок</response>
        /// <response code="404">Не найден ресурс, в ответе список ошибок</response>
        /// <response code="500">Внутренние ошибки сервера, в ответе список ошибок</response>
        [HttpPost]
        [Authorize(Policy = "ClientCredsReadWrite")]
        [Route("/places/nearest_delivery_times")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("PartnerNearestSlotsGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<NearestSlotsResponseInner>), description: "Усредненные слоты", ContentTypes = ["application/json"])]
        [SwaggerResponse(statusCode: 400, type: typeof(List<ErrorListInner>), description: "Ошибка в запросе, в ответе список ошибок", ContentTypes = ["application/json"])]
        [SwaggerResponse(statusCode: 401, type: typeof(List<ErrorListInner>), description: "Не пройдена авторизация, в ответе список ошибок", ContentTypes = ["application/json"])]
        [SwaggerResponse(statusCode: 404, type: typeof(List<ErrorListInner>), description: "Не найден ресурс, в ответе список ошибок", ContentTypes = ["application/json"])]
        [SwaggerResponse(statusCode: 500, type: typeof(List<ErrorListInner>), description: "Внутренние ошибки сервера, в ответе список ошибок", ContentTypes = ["application/json"])]
        public virtual IActionResult PartnerNearestSlotsGet([FromBody] NearestSlots nearestSlots)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<NearestSlotsResponseInner>));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(List<ErrorListInner>));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(List<ErrorListInner>));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(List<ErrorListInner>));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(List<ErrorListInner>));
            string exampleJson = null;
            exampleJson = "[ {\r\n  \"placeId\" : \"placeId\",\r\n  \"nearest_times\" : [ {\r\n    \"start_time\" : \"2022-05-18T15:35:27.000000+03:00\",\r\n    \"end_time\" : \"2022-05-18T16:05:27.000000+03:00\",\r\n    \"id\" : 15902\r\n  }, {\r\n    \"start_time\" : \"2022-05-18T15:35:27.000000+03:00\",\r\n    \"end_time\" : \"2022-05-18T16:05:27.000000+03:00\",\r\n    \"id\" : 15902\r\n  } ]\r\n}, {\r\n  \"placeId\" : \"placeId\",\r\n  \"nearest_times\" : [ {\r\n    \"start_time\" : \"2022-05-18T15:35:27.000000+03:00\",\r\n    \"end_time\" : \"2022-05-18T16:05:27.000000+03:00\",\r\n    \"id\" : 15902\r\n  }, {\r\n    \"start_time\" : \"2022-05-18T15:35:27.000000+03:00\",\r\n    \"end_time\" : \"2022-05-18T16:05:27.000000+03:00\",\r\n    \"id\" : 15902\r\n  } ]\r\n} ]";

            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<NearestSlotsResponseInner>>(exampleJson)
            : default(List<NearestSlotsResponseInner>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Слоты для использования в Корзине при оформлении заказа
        /// </summary>
        /// <param name="placeId">Внутренний уникальный идентификатор магазина в системе партнёра.</param>
        /// <param name="slotsCheckout"></param>
        /// <response code="200">Успешный запрос слотов</response>
        /// <response code="400">Ошибка в запросе, в ответе список ошибок</response>
        /// <response code="401">Не пройдена авторизация, в ответе список ошибок</response>
        /// <response code="404">Не найден ресурс, в ответе список ошибок</response>
        /// <response code="500">Внутренние ошибки сервера, в ответе список ошибок</response>
        [HttpPost]
        [Authorize(Policy = "ClientCredsReadWrite")]
        [Route("/places/{placeId}/delivery_times")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("PartnerSlotsGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(SlotsCheckoutResponse), description: "Успешный запрос слотов", ContentTypes = ["application/json"])]
        [SwaggerResponse(statusCode: 400, type: typeof(List<ErrorListInner>), description: "Ошибка в запросе, в ответе список ошибок", ContentTypes = ["application/json"])]
        [SwaggerResponse(statusCode: 401, type: typeof(List<ErrorListInner>), description: "Не пройдена авторизация, в ответе список ошибок", ContentTypes = ["application/json"])]
        [SwaggerResponse(statusCode: 404, type: typeof(List<ErrorListInner>), description: "Не найден ресурс, в ответе список ошибок", ContentTypes = ["application/json"])]
        [SwaggerResponse(statusCode: 500, type: typeof(List<ErrorListInner>), description: "Внутренние ошибки сервера, в ответе список ошибок", ContentTypes = ["application/json"])]
        public virtual IActionResult PartnerSlotsGet([FromRoute(Name = "placeId")][Required] string placeId, [FromBody] SlotsCheckout slotsCheckout)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(SlotsCheckoutResponse));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(List<ErrorListInner>));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(List<ErrorListInner>));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(List<ErrorListInner>));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(List<ErrorListInner>));
            string exampleJson = null;
            exampleJson = "{\r\n  \"delivery_times\" : [ {\r\n    \"start_time\" : \"start_time\",\r\n    \"end_time\" : \"end_time\",\r\n    \"id\" : 0\r\n  }, {\r\n    \"start_time\" : \"start_time\",\r\n    \"end_time\" : \"end_time\",\r\n    \"id\" : 0\r\n  } ]\r\n}";

            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<SlotsCheckoutResponse>(exampleJson)
            : default(SlotsCheckoutResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
